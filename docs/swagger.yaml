basePath: /rederinghub.io/v1
definitions:
  dao_artist.Status:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Verifying
    - Verified
  dao_artist_voted.Status:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Report
    - Verify
  dao_project.Status:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - Voting
    - Executed
    - Defeated
  dao_project_voted.Status:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Against
    - Voted
  entity.AuctionWinnerList:
    properties:
      address:
        type: string
      ethAddress:
        type: string
      mintPrice:
        type: integer
      quantity:
        type: integer
    type: object
  entity.BaseEntity:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
      uuid:
        type: string
    type: object
  entity.DeveloperKey:
    properties:
      apiCompany:
        type: string
      apiDescription:
        type: string
      apiEmail:
        type: string
      apiKey:
        type: string
      apiName:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      status:
        type: integer
      updated_at:
        type: string
      userUuid:
        type: string
      uuid:
        type: string
    type: object
  entity.FirebaseRegistrationToken:
    properties:
      base_entity:
        $ref: '#/definitions/entity.BaseEntity'
      created_at:
        type: string
      device_type:
        type: string
      registration_token:
        type: string
      user_wallet:
        type: string
    type: object
  entity.InscribeBTCResp:
    properties:
      amount:
        type: string
      expiredAt:
        type: string
      feeRate:
        type: integer
      inscriptionID:
        description: tokenID in ETH
        type: string
      isAuthentic:
        type: boolean
      isConfirm:
        description: 'default: false, if OrdAddress get all amount it will be set
          true'
        type: boolean
      isMinted:
        description: 'default: false. If InscriptionID exist which means token is
          minted, it''s true'
        type: boolean
      isSuccess:
        description: 'default: false. If InscriptionID was sent to user, it''s true'
        type: boolean
      projectTokenId:
        type: string
      status:
        allOf:
        - $ref: '#/definitions/entity.StatusInscribe'
        description: status for record
      tokenAddress:
        type: string
      tokenId:
        type: string
      txMintNft:
        type: string
      txSendBtc:
        type: string
      txSendNft:
        type: string
      userUuid:
        type: string
      uuid:
        type: string
    type: object
  entity.MintedImages:
    properties:
      commit:
        type: string
      fees:
        type: integer
      inscription:
        type: string
      isSent:
        type: boolean
      mintedAt:
        type: string
      reveal:
        type: string
      uri:
        type: string
    type: object
  entity.Pagination:
    properties:
      cursor:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      result: {}
      sort:
        items:
          type: string
        type: array
      sorts:
        items:
          $ref: '#/definitions/entity.Sort'
        type: array
      total:
        type: integer
      totalPage:
        type: integer
    type: object
  entity.ProfileSocial:
    properties:
      discord:
        type: string
      ether_scan:
        type: string
      instagram:
        type: string
      medium:
        type: string
      twitter:
        type: string
      twitterVerified:
        type: boolean
      web:
        type: string
    type: object
  entity.ProjectMintingInfo:
    properties:
      index:
        type: integer
      indexReverse:
        type: integer
    type: object
  entity.ProjectStat:
    properties:
      bestMakeOfferPrice:
        type: string
      floorPrice:
        type: string
      lastTimeSynced:
        type: string
      listedPercent:
        type: integer
      mintedCount:
        type: integer
      totalTradingVolumn:
        description: TODO add other stats here
        type: string
      trendingScore:
        type: integer
      uniqueOwnerCount:
        type: integer
    type: object
  entity.Projects:
    properties:
      animationHtml:
        type: string
      auctionWinnerList:
        items:
          $ref: '#/definitions/entity.AuctionWinnerList'
        type: array
      block_number_minted:
        type: string
      categories:
        items:
          type: string
        type: array
      catureThumbnailDelayTime:
        type: integer
      closeMintUnixTimestamp:
        type: integer
      commitTxHash:
        type: string
      completeTime:
        type: integer
      contractAddress:
        type: string
      created_by_collection_meta:
        type: boolean
      creatorAddrr:
        type: string
      creatorAddrrBTC:
        type: string
      creatorName:
        type: string
      creatorProfile:
        $ref: '#/definitions/entity.Users'
      description:
        type: string
      fromAuthentic:
        type: boolean
      genNFTAddr:
        type: string
      hash:
        type: string
      htmlFile:
        type: string
      images:
        description: if user uses links instead of animation URL
        items:
          type: string
        type: array
      inscribedBy:
        type: string
      inscriptionIcon:
        type: string
      isFullChain:
        type: boolean
      isHidden:
        type: boolean
      isSynced:
        type: boolean
      license:
        type: string
      limitMintPerProcess:
        type: integer
      limitSupply:
        type: integer
      maxFileSize:
        type: integer
      maxSupply:
        type: integer
      mintFee:
        type: integer
      mintPrice:
        type: string
      mintPriceEth:
        type: string
      mintTokenAddress:
        type: string
      minted_time:
        type: string
      mintedImages:
        description: if user uses links instead of animation URL
        items:
          $ref: '#/definitions/entity.MintedImages'
        type: array
      mintingInfo:
        $ref: '#/definitions/entity.ProjectMintingInfo'
      name:
        type: string
      networkFee:
        type: string
      networkFeeEth:
        type: string
      nftTokenUri:
        type: string
      openMintUnixTimestamp:
        type: integer
      ordinalsTx:
        type: string
      ownerOf:
        type: string
      priority:
        type: integer
      processingImages:
        items:
          type: string
        type: array
      reportUsers:
        items:
          $ref: '#/definitions/entity.ReportProject'
        type: array
      reserveMintLimit:
        type: integer
      reserveMintPrice:
        type: string
      reservers:
        items:
          type: string
        type: array
      revealTxHash:
        type: string
      royalty:
        type: integer
      scripts:
        items:
          type: string
        type: array
      socialDiscord:
        type: string
      socialInstagram:
        type: string
      socialMedium:
        type: string
      socialTwitter:
        type: string
      socialWeb:
        type: string
      source:
        type: string
      stats:
        $ref: '#/definitions/entity.ProjectStat'
      status:
        type: boolean
      styles:
        type: string
      tags:
        items:
          type: string
        type: array
      thirdPartyScripts:
        items:
          type: string
        type: array
      thumbnail:
        type: string
      tokenAddress:
        type: string
      tokenDescription:
        type: string
      tokenID:
        type: string
      tokenIDInt:
        type: integer
      tokenId:
        type: string
      traceID:
        description: TO find log easily
        type: string
      traitsStat:
        items:
          $ref: '#/definitions/entity.TraitStat'
        type: array
      txHash:
        type: string
      txHex:
        type: string
      whiteListEthContracts:
        description: if user uses links instead of animation URL
        items:
          type: string
        type: array
    type: object
  entity.ReportProject:
    properties:
      originalLink:
        type: string
      reportUserAddress:
        type: string
    type: object
  entity.Sort:
    properties:
      field:
        type: string
      type:
        $ref: '#/definitions/entity.SortType'
    type: object
  entity.SortType:
    enum:
    - 1
    - -1
    type: integer
    x-enum-varnames:
    - SORT_ASC
    - SORT_DESC
  entity.StatusInscribe:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    - 11
    - 12
    type: integer
    x-enum-comments:
      StatusInscribe_Minted: '5: mint success'
      StatusInscribe_Minting: '4: minting'
      StatusInscribe_NeedToRefund: '12: Need to refund BTC'
      StatusInscribe_NotEnoughBalance: '11: balance not enough'
      StatusInscribe_Pending: '0: pending: waiting for fund'
      StatusInscribe_ReceivedFund: '1: received fund from user (buyer)'
      StatusInscribe_SendingBTCFromSegwitAddrToOrdAddr: '2: sending btc from segwit
        address to ord address'
      StatusInscribe_SendingNFTToUser: '6: sending nft to user'
      StatusInscribe_SentBTCFromSegwitAddrToOrdAdd: '3: send btc from segwit address
        to ord address success, or ready to mint.'
      StatusInscribe_SentNFTToUser: '7: send nft to user success: flow DONE'
      StatusInscribe_TxMintFailed: '10: tx mint failed'
      StatusInscribe_TxSendBTCFromSegwitAddrToOrdAddrFailed: '8: send btc from segwit
        address to ord address failed'
      StatusInscribe_TxSendBTCToUserFailed: '9: send nft to user failed'
    x-enum-varnames:
    - StatusInscribe_Pending
    - StatusInscribe_ReceivedFund
    - StatusInscribe_SendingBTCFromSegwitAddrToOrdAddr
    - StatusInscribe_SentBTCFromSegwitAddrToOrdAdd
    - StatusInscribe_Minting
    - StatusInscribe_Minted
    - StatusInscribe_SendingNFTToUser
    - StatusInscribe_SentNFTToUser
    - StatusInscribe_TxSendBTCFromSegwitAddrToOrdAddrFailed
    - StatusInscribe_TxSendBTCToUserFailed
    - StatusInscribe_TxMintFailed
    - StatusInscribe_NotEnoughBalance
    - StatusInscribe_NeedToRefund
  entity.TokenPaidType:
    enum:
    - eth
    - btc
    type: string
    x-enum-varnames:
    - ETH
    - BIT
  entity.TokenStats:
    properties:
      price_int:
        type: integer
    type: object
  entity.TokenUri:
    properties:
      animation_url:
        type: string
      animationHtml:
        type: string
      attributes:
        type: string
      block_number_minted:
        type: string
      contract_address:
        type: string
      created_at:
        type: string
      createdByCollectionInscription:
        type: boolean
      createdMintActivity:
        type: boolean
      createdTokenTx:
        type: boolean
      creator:
        $ref: '#/definitions/entity.Users'
      creatorAddr:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      genNFTAddr:
        type: string
      image:
        type: string
      inscribedBy:
        type: string
      inscriptionIndex:
        type: string
      isOnchain:
        type: boolean
      minted_time:
        type: string
      minterAddress:
        type: string
      name:
        type: string
      nftTokenId:
        type: string
      order_inscription_index:
        type: integer
      originalInscribedBy:
        type: string
      owner:
        allOf:
        - $ref: '#/definitions/entity.Users'
        description: accept duplicated data to query more faster
      ownerAddr:
        type: string
      paidType:
        $ref: '#/definitions/entity.TokenPaidType'
      parsed_attributes:
        items:
          $ref: '#/definitions/entity.TokenUriAttr'
        type: array
      parsed_attributes_str:
        items:
          $ref: '#/definitions/entity.TokenUriAttrStr'
        type: array
      parsed_image:
        type: string
      priority:
        type: integer
      project:
        $ref: '#/definitions/entity.Projects'
      project_id:
        type: string
      project_id_int:
        type: integer
      seed:
        type: string
      source:
        type: string
      stats:
        $ref: '#/definitions/entity.TokenStats'
      syncedInscriptionInfo:
        type: boolean
      thumbnail:
        type: string
      thumbnailCapturedAt:
        type: string
      token_id:
        type: string
      token_id_int:
        type: integer
      token_id_mini:
        type: integer
      updated_at:
        type: string
    type: object
  entity.TokenUriAttr:
    properties:
      trait_type:
        type: string
      value: {}
    type: object
  entity.TokenUriAttrStr:
    properties:
      trait_type:
        type: string
      value:
        type: string
    type: object
  entity.TraitStat:
    properties:
      traitName:
        type: string
      traitValuesStat:
        items:
          $ref: '#/definitions/entity.TraitValueStat'
        type: array
    type: object
  entity.TraitValueStat:
    properties:
      rarity:
        type: integer
      value:
        type: string
    type: object
  entity.UserStats:
    properties:
      collection_created:
        type: integer
      nft_minted:
        type: integer
      output_minted:
        type: integer
      total_mint:
        type: integer
      total_minted:
        type: integer
      volume_minted:
        type: number
    type: object
  entity.Users:
    properties:
      avatar:
        type: string
      bio:
        type: string
      created_at:
        type: string
      display_name:
        type: string
      enable_notification:
        type: boolean
      is_updated_avatar:
        type: boolean
      isAdmin:
        type: boolean
      isVerified:
        type: boolean
      message:
        type: string
      profile_social:
        $ref: '#/definitions/entity.ProfileSocial'
      stats:
        $ref: '#/definitions/entity.UserStats'
      verifiedAt:
        type: string
      wallet_address:
        description: ID                      string        `bson:"id" json:"id,omitempty"`
        type: string
      wallet_address_btc:
        description: btc wallet artist receive royalty
        type: string
      wallet_address_btc_taproot:
        description: btc wallet receive minted nft
        type: string
      wallet_address_payment:
        description: eth wallet artist receive royalty
        type: string
      wallet_type:
        type: string
    type: object
  nfts.InscribeBTC:
    properties:
      inscription_id:
        type: string
      project_token_id:
        type: string
      status:
        type: integer
    type: object
  nfts.MoralisToken:
    properties:
      amount:
        type: string
      block_number_minted:
        type: string
      contract_type:
        type: string
      inscribe_btc:
        $ref: '#/definitions/nfts.InscribeBTC'
      is_minted:
        type: boolean
      metadata:
        type: string
      metadata_obj:
        allOf:
        - $ref: '#/definitions/nfts.MoralisTokenMetadata'
        description: Custom
      name:
        type: string
      owner_of:
        type: string
      symbol:
        type: string
      token_address:
        type: string
      token_hash:
        type: string
      token_id:
        type: string
      token_uri:
        type: string
    type: object
  nfts.MoralisTokenMetadata:
    properties:
      animation_url:
        type: string
      description:
        type: string
      external_link:
        type: string
      image:
        type: string
      name:
        type: string
      traits: {}
    type: object
  request.CheckBalanceAddressReq:
    properties:
      address:
        type: string
    type: object
  request.CompressImageReq:
    properties:
      compressPercents:
        items:
          type: integer
        type: array
      imageUrl:
        type: string
    type: object
  request.CreateBTCProjectReq:
    properties:
      animationURL:
        type: string
      captureImageTime:
        type: integer
      categories:
        items:
          type: string
        type: array
      closeMintUnixTimestamp:
        type: integer
      creatorAddrr:
        type: string
      creatorAddrrBTC:
        type: string
      creatorName:
        type: string
      description:
        type: string
      isFullChain:
        type: boolean
      license:
        type: string
      limitMintPerProcess:
        type: integer
      limitSupply:
        type: integer
      maxSupply:
        type: integer
      mintPrice:
        type: string
      name:
        type: string
      openMintUnixTimestamp:
        type: integer
      reserveMintLimit:
        type: integer
      reserveMintPrice:
        type: string
      reservers:
        items:
          type: string
        type: array
      royalty:
        type: integer
      scripts:
        items:
          type: string
        type: array
      socialDiscord:
        type: string
      socialInstagram:
        type: string
      socialMedium:
        type: string
      socialTwitter:
        type: string
      socialWeb:
        type: string
      styles:
        type: string
      tags:
        items:
          type: string
        type: array
      thirdPartyScripts:
        items:
          type: string
        type: array
      thumbnail:
        type: string
      tokenDescription:
        type: string
      zipLink:
        type: string
    type: object
  request.CreateBtcWalletAddressReq:
    properties:
      projectID:
        type: string
      walletAddress:
        type: string
    type: object
  request.CreateCategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  request.CreateConfigRequest:
    properties:
      key:
        type: string
      value:
        type: string
    required:
    - key
    - value
    type: object
  request.CreateDaoArtistRequest:
    properties:
      twitter:
        type: string
      web:
        type: string
    type: object
  request.CreateDaoProjectRequest:
    properties:
      project_ids:
        items:
          type: string
        type: array
    required:
    - project_ids
    type: object
  request.CreateETHProjectReq:
    properties:
      animationURL:
        type: string
      captureImageTime:
        type: integer
      categories:
        items:
          type: string
        type: array
      closeMintUnixTimestamp:
        type: integer
      commitTxHash:
        type: string
      creatorAddrr:
        type: string
      creatorAddrrBTC:
        type: string
      creatorName:
        type: string
      description:
        type: string
      isFullChain:
        type: boolean
      license:
        type: string
      limitMintPerProcess:
        type: integer
      limitSupply:
        type: integer
      maxSupply:
        type: integer
      mintPrice:
        type: string
      name:
        type: string
      openMintUnixTimestamp:
        type: integer
      reserveMintLimit:
        type: integer
      reserveMintPrice:
        type: string
      reservers:
        items:
          type: string
        type: array
      revealTxHash:
        type: string
      royalty:
        type: integer
      scripts:
        items:
          type: string
        type: array
      socialDiscord:
        type: string
      socialInstagram:
        type: string
      socialMedium:
        type: string
      socialTwitter:
        type: string
      socialWeb:
        type: string
      styles:
        type: string
      tags:
        items:
          type: string
        type: array
      thirdPartyScripts:
        items:
          type: string
        type: array
      thumbnail:
        type: string
      tokenDescription:
        type: string
      txHash:
        type: string
      txHex:
        type: string
      zipLink:
        type: string
    type: object
  request.CreateEthWalletAddressReq:
    properties:
      projectID:
        type: string
      walletAddress:
        type: string
    type: object
  request.CreateFcmDataTest:
    properties:
      data:
        additionalProperties:
          type: string
        type: object
      device_type:
        type: string
      registration_token:
        type: string
    required:
    - data
    - device_type
    type: object
  request.CreateFcmRequest:
    properties:
      device_type:
        type: string
      registration_token:
        type: string
    required:
    - device_type
    - registration_token
    type: object
  request.CreateInscribeBtcReq:
    properties:
      fee_rate:
        type: integer
      file:
        type: string
      fileName:
        type: string
      name:
        type: string
      payType:
        type: string
      tokenAddress:
        type: string
      tokenId:
        type: string
      walletAddress:
        type: string
    type: object
  request.CreateMultipartUploadRequest:
    properties:
      fileName:
        type: string
      group:
        type: string
    type: object
  request.CreateProposalReq:
    properties:
      amount:
        type: string
      description:
        type: string
      receiverAddress:
        type: string
      title:
        type: string
      tokenType:
        type: string
    type: object
  request.CreateWhitelistedEthWalletAddressReq:
    properties:
      projectID:
        type: string
      walletAddress:
        type: string
    type: object
  request.DeveloperCreateInscribeBtcReq:
    properties:
      feeRate:
        type: integer
      file:
        type: string
      fileName:
        type: string
      name:
        type: string
      tokenAddress:
        type: string
      tokenId:
        type: string
      walletAddress:
        type: string
    type: object
  request.FileResize:
    properties:
      file:
        type: string
    type: object
  request.GenerateMessageRequest:
    properties:
      address:
        type: string
      walletType:
        type: string
    type: object
  request.GetApiKeyReq:
    properties:
      company:
        type: string
      description:
        type: string
      email:
        type: string
      g-recaptcha-response:
        type: string
      name:
        type: string
    type: object
  request.ListNftIdsReq:
    properties:
      inscriptionIDs:
        items:
          type: string
        type: array
      payType:
        additionalProperties:
          type: string
        type: object
      price:
        type: string
      seller_address:
        type: string
      seller_ord_address:
        type: string
    type: object
  request.ProfileSocial:
    properties:
      discord:
        type: string
      etherScan:
        type: string
      instagram:
        type: string
      medium:
        type: string
      twitter:
        type: string
      web:
        type: string
    type: object
  request.ReportProjectReq:
    properties:
      originalLink:
        type: string
    type: object
  request.SendNewBidNotifyRequest:
    properties:
      bid_price:
        type: number
      collector_redirect_to:
        type: string
      quantity:
        type: integer
      wallet_address:
        type: string
    type: object
  request.UpdateBTCProjectCategoriesReq:
    properties:
      categories:
        items:
          type: string
        type: array
    type: object
  request.UpdateBTCProjectReq:
    properties:
      captureImageTime:
        type: integer
      categories:
        items:
          type: string
        type: array
      description:
        type: string
      isHidden:
        type: boolean
      limitMintPerProcess:
        type: integer
      maxSupply:
        type: integer
      mintPrice:
        type: string
      name:
        type: string
      projectID:
        type: string
      reserveMintLimit:
        type: integer
      reserveMintPrice:
        type: string
      reservers:
        items:
          type: string
        type: array
      royalty:
        type: integer
      thumbnail:
        type: string
    type: object
  request.UpdateProfileRequest:
    properties:
      avatar:
        type: string
      bio:
        type: string
      displayName:
        type: string
      enableNotification:
        type: boolean
      profileSocial:
        $ref: '#/definitions/request.ProfileSocial'
      walletAddressBtc:
        type: string
      walletAddressPayment:
        type: string
    type: object
  request.UpdateProjectReq:
    properties:
      priority:
        type: integer
    type: object
  request.UpdateTokenThumbnailReq:
    properties:
      thumbnail:
        type: string
    type: object
  request.UpdateTokentReq:
    properties:
      priority:
        type: integer
    type: object
  request.UpsertRedisRequest:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  request.VerifyMessageRequest:
    properties:
      address:
        type: string
      addressBtc:
        type: string
      addressBtcSegwit:
        type: string
      addressPayment:
        type: string
      ethSignature:
        type: string
      messagePrefix:
        type: string
      signature:
        type: string
    type: object
  request.VoteDaoArtistRequest:
    properties:
      status:
        $ref: '#/definitions/dao_artist_voted.Status'
    type: object
  request.VoteDaoProjectRequest:
    properties:
      status:
        $ref: '#/definitions/dao_project_voted.Status'
    type: object
  request.WithDrawItemRequest:
    properties:
      amount:
        type: string
      id:
        description: 'referal  (referal: refereeID, project: tokenID)'
        type: string
      paymentType:
        description: referal or project
        type: string
      type:
        type: string
    type: object
  response.ActionDaoArtist:
    properties:
      can_vote:
        type: boolean
    type: object
  response.ActionDaoProject:
    properties:
      can_vote:
        type: boolean
    type: object
  response.CategoryResp:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  response.ConfigResp:
    properties:
      id:
        type: string
      key:
        type: string
      value:
        type: string
    type: object
  response.DaoArtist:
    properties:
      action:
        $ref: '#/definitions/response.ActionDaoArtist'
      created_at:
        type: string
      created_by:
        type: string
      dao_artist_voted:
        items:
          $ref: '#/definitions/response.DaoArtistVoted'
        type: array
      deleted_at:
        type: string
      expired_at:
        type: string
      id:
        type: string
      seq_id:
        type: integer
      status:
        $ref: '#/definitions/dao_artist.Status'
      total_report:
        type: integer
      total_verify:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/response.UserForDao'
      uuid:
        type: string
    type: object
  response.DaoArtistVoted:
    properties:
      created_by:
        type: string
      dao_project_id:
        type: string
      display_name:
        type: string
      status:
        $ref: '#/definitions/dao_artist_voted.Status'
    type: object
  response.DaoProject:
    properties:
      action:
        $ref: '#/definitions/response.ActionDaoProject'
      created_at:
        type: string
      created_by:
        type: string
      dao_project_voted:
        items:
          $ref: '#/definitions/response.DaoProjectVoted'
        type: array
      deleted_at:
        type: string
      expired_at:
        type: string
      id:
        type: string
      project:
        $ref: '#/definitions/response.ProjectForDaoProject'
      project_id:
        type: string
      seq_id:
        type: integer
      status:
        $ref: '#/definitions/dao_project.Status'
      total_against:
        type: integer
      total_vote:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/response.UserForDao'
      uuid:
        type: string
    type: object
  response.DaoProjectVoted:
    properties:
      created_by:
        type: string
      dao_project_id:
        type: string
      display_name:
        type: string
      status:
        $ref: '#/definitions/dao_project_voted.Status'
    type: object
  response.FileRes:
    properties:
      fileName:
        type: string
      fileSize:
        type: integer
      id:
        type: string
      mimeType:
        type: string
      uploadedBy:
        type: string
      url:
        type: string
    type: object
  response.FileResponse:
    properties:
      uploadId:
        type: string
    type: object
  response.GeneratedMessage:
    properties:
      message:
        type: string
    type: object
  response.InscribeBtcResp:
    properties:
      amount:
        type: string
      balance:
        description: balance after check
        type: string
      estFeeInfo: {}
      fileURI:
        description: FileURI will be mount if OrdAddress get all amount
        type: string
      id:
        type: string
      inscriptionID:
        description: tokenID in ETH
        type: string
      isConfirm:
        description: 'default: false, if OrdAddress get all amount it will be set
          true'
        type: boolean
      mintFee:
        type: string
      ordAddress:
        description: address is generated from ORD service, which receive all amount
        type: string
      segwitAddress:
        type: string
      sentTokenFee:
        type: string
      timeoutAt:
        type: string
      userAddress:
        description: user's wallet address from FE
        type: string
    type: object
  response.InscribeInfoResp:
    properties:
      address:
        type: string
      content:
        type: string
      contentLength:
        type: string
      contentType:
        type: string
      genesisFee:
        type: string
      genesisHeight:
        type: string
      genesisTransaction:
        type: string
      id:
        type: string
      index:
        type: string
      location:
        type: string
      offset:
        type: string
      output:
        type: string
      outputValue:
        type: string
      preview:
        type: string
      sat:
        type: string
      timestamp:
        type: string
    type: object
  response.InternalTokenTraitsResp:
    properties:
      attributes: {}
    type: object
  response.InternalTokenURIResp:
    properties:
      animationUrl:
        type: string
      attributes: {}
      buyable:
        description: 'for buyable:'
        type: boolean
      creator:
        $ref: '#/definitions/response.ProfileResponse'
      description:
        type: string
      genNFTAddr:
        type: string
      id:
        type: string
      image:
        type: string
      inscribedBy:
        type: string
      inscriptionIndex:
        type: string
      isCompleted:
        type: boolean
      listingDetail:
        $ref: '#/definitions/structure.MarketplaceNFTDetail'
      mintedTime:
        type: string
      name:
        type: string
      nftTokenId:
        type: string
      orderID:
        type: string
      orderInscriptionIndex:
        type: integer
      ordinalsData:
        $ref: '#/definitions/response.OrdinalsData'
      owner:
        $ref: '#/definitions/response.ProfileResponse'
      ownerAddr:
        type: string
      priceBTC:
        type: string
      priceETH:
        type: string
      priority:
        type: integer
      project:
        $ref: '#/definitions/response.ProjectResp'
      seed:
        type: string
      sell_verified:
        type: boolean
      stats:
        $ref: '#/definitions/response.TokenStat'
      thumbnail:
        type: string
      tokenID:
        type: string
    type: object
  response.JsonResponse:
    properties:
      data: {}
      error:
        $ref: '#/definitions/response.RespondErr'
      status:
        type: boolean
    type: object
  response.LogoutResponse:
    properties:
      message:
        type: string
    type: object
  response.MultipartUploadResponse:
    properties:
      fileUrl:
        type: string
    type: object
  response.NftMintingDetail:
    properties:
      index:
        type: integer
      indexReserve:
        type: integer
    type: object
  response.OrdinalsData:
    properties:
      block:
        type: integer
      contentLength:
        type: string
      contentType:
        type: string
      sat:
        type: number
      timestamp:
        type: string
    type: object
  response.ProfileResponse:
    properties:
      avatar:
        type: string
      bio:
        type: string
      canCreateProposal:
        type: boolean
      createdAt:
        type: string
      displayName:
        type: string
      id:
        type: string
      profileSocial:
        $ref: '#/definitions/response.ProfileSocial'
      proposal:
        $ref: '#/definitions/response.DaoArtist'
      walletAddress:
        type: string
      walletAddressBtc:
        type: string
      walletAddressBtcTaproot:
        type: string
      walletAddressPayment:
        type: string
    type: object
  response.ProfileSocial:
    properties:
      discord:
        type: string
      etherScan:
        type: string
      instagram:
        type: string
      medium:
        type: string
      twitter:
        type: string
      twitterVerified:
        type: boolean
      web:
        type: string
    type: object
  response.ProjectForDaoProject:
    properties:
      created_at:
        type: string
      creator_by:
        type: string
      creator_name:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      is_hidden:
        type: boolean
      max_supply:
        type: integer
      mint_price:
        type: string
      mint_price_eth:
        type: string
      minting_info:
        $ref: '#/definitions/response.ProjectMintingInfo'
      name:
        type: string
      thumbnail:
        type: string
      token_id:
        type: string
      updated_at:
        type: string
      uuid:
        type: string
    type: object
  response.ProjectMintingInfo:
    properties:
      index:
        type: integer
      index_reverse:
        type: integer
    type: object
  response.ProjectResp:
    properties:
      animationHtml:
        type: string
      auctionWinnerList:
        items:
          $ref: '#/definitions/entity.AuctionWinnerList'
        type: array
      blockNumberMinted:
        type: string
      btcFloorPrice:
        type: integer
      canCreateProposal:
        type: boolean
      captureThumbnailDelayTime:
        type: integer
      categories:
        items:
          type: string
        type: array
      closeMintUnixTimestamp:
        type: integer
      completeTime:
        type: integer
      contractAddress:
        type: string
      creatorAddr:
        type: string
      creatorAddrrBTC:
        type: string
      creatorProfile:
        $ref: '#/definitions/response.ProfileResponse'
      desc:
        type: string
      editableIsHidden:
        type: boolean
      fileExtension:
        type: string
      fromAuthentic:
        type: boolean
      genNFTAddr:
        type: string
      htmlFile:
        type: string
      id:
        type: string
      image:
        type: string
      inscribedBy:
        type: string
      isFullChain:
        type: boolean
      isGenerative:
        description: art by generative code or html file
        type: boolean
      isHidden:
        type: boolean
      isReviewing:
        type: boolean
      isSynced:
        type: boolean
      itemDesc:
        type: string
      license:
        type: string
      limit:
        type: integer
      limitMintPerProcess:
        type: integer
      maxFileSize:
        type: integer
      maxSupply:
        type: integer
      mintPrice:
        type: string
      mintPriceAddr:
        type: string
      mintPriceEth:
        type: string
      mintedTime:
        type: string
      mintingInfo:
        $ref: '#/definitions/response.NftMintingDetail'
      name:
        type: string
      networkFee:
        type: string
      networkFeeEth:
        type: string
      nftTokenId:
        type: string
      openMintUnixTimestamp:
        type: integer
      ordinalsTx:
        type: string
      ownerOf:
        type: string
      priority:
        type: integer
      projectURI:
        type: string
      proposalSeqId:
        type: integer
      reportUsers:
        items:
          $ref: '#/definitions/response.ReportProject'
        type: array
      reserveMintLimit:
        type: integer
      reserveMintPrice:
        type: string
      reservers:
        items:
          type: string
        type: array
      royalty:
        type: integer
      scriptType:
        items:
          type: string
        type: array
      scripts:
        items:
          type: string
        type: array
      social: {}
      stats:
        $ref: '#/definitions/response.ProjectStatResp'
      status:
        type: boolean
      styles:
        type: string
      tokenAddress:
        type: string
      tokenID:
        type: string
      totalImages:
        type: integer
      traitStat:
        items:
          $ref: '#/definitions/response.TraitStat'
        type: array
      txHash:
        description: art by generative code or html file
        type: string
      txHex:
        description: art by generative code or html file
        type: string
      whiteListEthContracts:
        items:
          type: string
        type: array
    type: object
  response.ProjectStatResp:
    properties:
      bestMakeOfferPrice:
        type: string
      floorPrice:
        type: string
      listedPercent:
        type: integer
      totalTradingVolumn:
        type: string
      uniqueOwnerCount:
        type: integer
    type: object
  response.RedisResponse:
    properties:
      value:
        type: string
    type: object
  response.ReportProject:
    properties:
      originalLink:
        type: string
      reportUserAddress:
        type: string
    type: object
  response.RespondErr:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  response.TokenStat:
    properties:
      price:
        type: string
    type: object
  response.TokenTraitsResp:
    properties:
      attributes: {}
    type: object
  response.TokenURIResp:
    properties:
      animation_url:
        type: string
      attributes: {}
      description:
        type: string
      image:
        type: string
      name:
        type: string
    type: object
  response.TraitStat:
    properties:
      traitName:
        type: string
      traitValuesStat:
        items:
          $ref: '#/definitions/response.TraitValueStat'
        type: array
    type: object
  response.TraitValueStat:
    properties:
      rarity:
        type: integer
      value:
        type: string
    type: object
  response.UserForDao:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      display_name:
        type: string
      id:
        type: string
      is_verified:
        type: boolean
      profile_social:
        $ref: '#/definitions/response.ProfileSocial'
      stats:
        $ref: '#/definitions/response.UserStats'
      updated_at:
        type: string
      uuid:
        type: string
      wallet_address:
        type: string
      wallet_address_btc:
        type: string
      wallet_address_btc_taproot:
        type: string
      wallet_address_payment:
        type: string
    type: object
  response.UserStats:
    properties:
      collection_created:
        type: integer
      total_mint:
        type: integer
      total_minted:
        type: integer
    type: object
  response.VerifyResponse:
    properties:
      accessToken:
        type: string
      isVerified:
        type: boolean
      refreshToken:
        type: string
    type: object
  structure.DeflateDataResp:
    properties:
      data:
        type: string
    type: object
  structure.FileContentReq:
    properties:
      content:
        type: string
      deflate:
        type: string
      mediaType:
        type: string
    type: object
  structure.MarketplaceNFTDetail:
    properties:
      buyable:
        type: boolean
      collection_id:
        description: for filter
        type: string
      collection_name:
        type: string
      contentLength:
        type: string
      contentType:
        type: string
      createdAt:
        type: string
      description:
        type: string
      inscription:
        $ref: '#/definitions/entity.TokenUri'
      inscription_index:
        type: string
      inscription_name:
        type: string
      inscriptionID:
        type: string
      inscriptionNumber:
        type: string
      isCompleted:
        type: boolean
      isConfirmed:
        type: boolean
      name:
        type: string
      orderID:
        type: string
      payType:
        additionalProperties:
          type: string
        type: object
      paymentListingInfo:
        additionalProperties:
          $ref: '#/definitions/structure.PaymentInfoForBuyOrder'
        description: 'paytype:'
        type: object
      price:
        type: string
    type: object
  structure.MinifyDataResp:
    properties:
      files:
        additionalProperties:
          $ref: '#/definitions/structure.FileContentReq'
        type: object
    type: object
  structure.PaymentInfoForBuyOrder:
    properties:
      paymentAddress:
        type: string
      price:
        type: string
    type: object
  structure.UpdateProjectHash:
    properties:
      commitTxHash:
        type: string
      contractAddress:
        type: string
      revealTxHash:
        type: string
      txHash:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server Generative.
  title: Generative.xyz APIs
  version: 1.0.0
paths:
  /admin-test:
    get:
      consumes:
      - application/json
      description: Get Redis
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.RedisResponse'
                  type: array
              type: object
      summary: Get Redis
      tags:
      - Admin
  /admin/auto-listing:
    post:
      consumes:
      - application/json
      description: Auto listing
      parameters:
      - description: ' Auto listing'
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ListNftIdsReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  type: boolean
              type: object
      summary: Auto listing
      tags:
      - Admin
  /admin/redis:
    delete:
      consumes:
      - application/json
      description: Delete Redis
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete Redis
      tags:
      - Admin
    get:
      consumes:
      - application/json
      description: Get Redis
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.RedisResponse'
                  type: array
              type: object
      summary: Get Redis
      tags:
      - Admin
    post:
      consumes:
      - application/json
      description: Upsert Redis
      parameters:
      - description: Upsert redis key
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpsertRedisRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.RedisResponse'
              type: object
      summary: Upsert Redis
      tags:
      - Admin
  /admin/redis/{key}:
    delete:
      consumes:
      - application/json
      description: Delete Redis
      parameters:
      - description: Redis key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete Redis
      tags:
      - Admin
    get:
      consumes:
      - application/json
      description: Get Redis
      parameters:
      - description: Redis key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.RedisResponse'
              type: object
      summary: Get Redis
      tags:
      - Admin
  /auth/nonce:
    post:
      consumes:
      - application/json
      description: Generate a message for user's wallet
      parameters:
      - description: Generate message request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.GenerateMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.GeneratedMessage'
              type: object
      summary: Generate a message
      tags:
      - Auth
  /auth/nonce/verify:
    post:
      consumes:
      - application/json
      description: Verified the generated message
      parameters:
      - description: Verify message request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.VerifyMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.VerifyResponse'
              type: object
      summary: Verified the generated message
      tags:
      - Auth
  /btc/balance:
    post:
      consumes:
      - application/json
      description: mint
      parameters:
      - description: Check balance of ORD_WALLET_ADDRESS
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CheckBalanceAddressReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: BTC mint
      tags:
      - BTC
  /btc/receive-address:
    post:
      consumes:
      - application/json
      description: Generate receive wallet address
      parameters:
      - description: Create a btc wallet address request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateBtcWalletAddressReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: BTC Generate receive wallet address
      tags:
      - BTC
  /categories:
    get:
      consumes:
      - application/json
      description: Get Categorys
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.CategoryResp'
              type: object
      summary: Get Categorys
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: create Category
      parameters:
      - description: Create a Category
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.CategoryResp'
              type: object
      summary: create Category
      tags:
      - Categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: delete Category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.CategoryResp'
              type: object
      summary: delete Category
      tags:
      - Categories
    get:
      consumes:
      - application/json
      description: get one Category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.CategoryResp'
              type: object
      summary: get one Category
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: update Category
      parameters:
      - description: Create a Category
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateCategoryRequest'
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.CategoryResp'
              type: object
      summary: update Category
      tags:
      - Categories
  /charts/collections/{projectID}/charts:
    get:
      consumes:
      - application/json
      description: get list CollectionListing
      parameters:
      - description: projectID
        in: path
        name: projectID
        type: string
      - description: dateRange
        in: query
        name: dateRange
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: CollectionListing
      tags:
      - CollectionListing
  /charts/tokens/{tokenID}/charts:
    get:
      consumes:
      - application/json
      description: TokenURI's chart
      parameters:
      - description: tokenID
        in: path
        name: tokenID
        required: true
        type: string
      - description: dateRange
        in: query
        name: dateRange
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: TokenURI's chart
      tags:
      - Charts
  /collections:
    get:
      consumes:
      - application/json
      description: get list tokens og a collection and respond data for chart
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Collection's chart
      tags:
      - CollectionListing
  /collections/items:
    get:
      consumes:
      - application/json
      description: get list CollectionListing
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: CollectionListing
      tags:
      - CollectionListing
  /collections/on-sale-items:
    get:
      consumes:
      - application/json
      description: get list CollectionListing
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: CollectionListing
      tags:
      - CollectionListing
  /collections/sub-collection-items:
    get:
      consumes:
      - application/json
      description: get list CollectionListing
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: number_from
        in: query
        name: number_from
        type: integer
      - description: number_to
        in: query
        name: number_to
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: CollectionListing
      tags:
      - CollectionListing
  /configs:
    get:
      consumes:
      - application/json
      description: Get configs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.ConfigResp'
              type: object
      summary: Get configs
      tags:
      - Configs
    post:
      consumes:
      - application/json
      description: create config
      parameters:
      - description: Create a config
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.ConfigResp'
              type: object
      summary: create config
      tags:
      - Configs
  /configs/{key}:
    delete:
      consumes:
      - application/json
      description: delete config
      parameters:
      - description: config key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.ConfigResp'
              type: object
      summary: delete config
      tags:
      - Configs
    get:
      consumes:
      - application/json
      description: get one config
      parameters:
      - description: config key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.ConfigResp'
              type: object
      summary: get one config
      tags:
      - Configs
  /dao-artist:
    get:
      consumes:
      - application/json
      description: List DAO Artist
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Status
        in: query
        name: status
        type: integer
      - description: Last Id
        in: query
        name: cursor
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Pagination'
      security:
      - ApiKeyAuth: []
      summary: List DAO Artist
      tags:
      - DAO Artist
    post:
      consumes:
      - application/json
      description: Create DAO Artist
      parameters:
      - description: Create Dao Artist Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateDaoArtistRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Create DAO Artist
      tags:
      - DAO Artist
  /dao-artist/{id}:
    get:
      consumes:
      - application/json
      description: Get DAO Artist
      parameters:
      - description: DAO Artist Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Get DAO Artist
      tags:
      - DAO Artist
    put:
      consumes:
      - application/json
      description: Vote DAO Artist
      parameters:
      - description: DAO Artist Id
        in: path
        name: id
        required: true
        type: string
      - description: Vote Dao Artist Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.VoteDaoArtistRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Vote DAO Artist
      tags:
      - DAO Artist
  /dao-project:
    get:
      consumes:
      - application/json
      description: List DAO Project
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Status
        in: query
        name: status
        type: integer
      - description: Last Id
        in: query
        name: cursor
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Pagination'
      security:
      - ApiKeyAuth: []
      summary: List DAO Project
      tags:
      - DAO Project
    post:
      consumes:
      - application/json
      description: Create DAO Project
      parameters:
      - description: Create Dao Project Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateDaoProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Create DAO Project
      tags:
      - DAO Project
  /dao-project/{id}:
    get:
      consumes:
      - application/json
      description: Get DAO Project
      parameters:
      - description: Dao Project Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.DaoProject'
      security:
      - ApiKeyAuth: []
      summary: Get DAO Project
      tags:
      - DAO Project
    put:
      consumes:
      - application/json
      description: Vote DAO Project
      parameters:
      - description: Vote Dao Project Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.VoteDaoProjectRequest'
      - description: Dao Project Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Vote DAO Project
      tags:
      - DAO Project
  /dao-project/me/projects-hidden:
    get:
      consumes:
      - application/json
      description: List Projects Is Hidden
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Last Id
        in: query
        name: cursor
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Pagination'
      security:
      - ApiKeyAuth: []
      summary: List Projects Is Hidden
      tags:
      - DAO Project
  /dao/proposals:
    get:
      consumes:
      - application/json
      description: DAO list proposal
      parameters:
      - description: filter by proposer
        in: query
        name: proposer
        type: string
      - description: filter by proposalID
        in: query
        name: proposalID
        type: string
      - description: filter by state
        in: query
        name: state
        type: string
      - description: newest, minted-newest, token-price-asc, token-price-desc
        in: query
        name: sort
        type: string
      - description: limit default 10
        in: query
        name: limit
        type: integer
      - description: page start with 1
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: DAO list proposal
      tags:
      - DAO
    post:
      consumes:
      - application/json
      description: DAO create a draft proposal
      parameters:
      - description: Create a draft proposal request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateProposalReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: DAO create a draft proposal
      tags:
      - DAO
  /dao/proposals/{ID}/{proposalID}:
    put:
      consumes:
      - application/json
      description: DAO off and onchain proposal
      parameters:
      - description: 'ID: the offChain ID'
        in: path
        name: ID
        required: true
        type: string
      - description: 'proposalID: the onchain ID'
        in: path
        name: proposalID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: DAO map off and onchain proposal
      tags:
      - DAO
  /dao/proposals/{proposalID}:
    get:
      consumes:
      - application/json
      description: DAO proposal's detail
      parameters:
      - description: 'proposalID: the onchain ID'
        in: path
        name: proposalID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: DAO proposal's detail
      tags:
      - DAO
  /dao/proposals/{proposalID}/votes:
    get:
      consumes:
      - application/json
      description: DAO proposal's detail
      parameters:
      - description: 'proposalID: the onchain ID'
        in: path
        name: proposalID
        required: true
        type: string
      - description: filter by voter
        in: query
        name: voter
        type: string
      - description: filter by support
        in: query
        name: support
        type: string
      - description: newest, minted-newest, token-price-asc, token-price-desc
        in: query
        name: sort
        type: string
      - description: limit default 10
        in: query
        name: limit
        type: integer
      - description: page start with 1
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: DAO proposal's votes
      tags:
      - DAO
  /developer/get-api-key:
    get:
      consumes:
      - application/json
      description: Get an api key for developer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.DeveloperKey'
      security:
      - No Authorization: []
      summary: Get api key for developer
      tags:
      - developer
    post:
      consumes:
      - application/json
      description: Generate an api key for developer
      parameters:
      - description: Request API key
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.GetApiKeyReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - Authorization: []
      summary: Generate an api key for developer
      tags:
      - developer
  /developer/inscribe:
    get:
      consumes:
      - application/json
      description: BTC List Inscribe
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Pagination'
      security:
      - ApiKeyAuth: []
      summary: BTC List Inscribe
      tags:
      - Inscribe
    post:
      consumes:
      - application/json
      description: BTC Generate receive wallet address
      parameters:
      - description: Create mint request for dev
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.DeveloperCreateInscribeBtcReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.InscribeBtcResp'
      security:
      - api-key: []
      summary: BTC Generate receive wallet address
      tags:
      - Inscribe
  /developer/inscribe/{ID}:
    get:
      consumes:
      - application/json
      description: BTC NFT Detail Inscribe
      parameters:
      - description: inscribe ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.InscribeBTCResp'
      security:
      - ApiKeyAuth: []
      summary: BTC NFT Detail Inscribe
      tags:
      - Inscribe
  /discord/new-bid:
    post:
      description: send new bid notification
      parameters:
      - description: Data for minify
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.SendNewBidNotifyRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - Authorization: []
      summary: send new bid notification
      tags:
      - Discord
  /eth/receive-address:
    post:
      consumes:
      - application/json
      description: Generate receive wallet address
      parameters:
      - description: Create a eth wallet address request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateEthWalletAddressReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: ETH Generate receive wallet address
      tags:
      - ETH
  /eth/receive-address/whitelist:
    post:
      consumes:
      - application/json
      description: Generate receive wallet address
      parameters:
      - description: Create a eth wallet address request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateWhitelistedEthWalletAddressReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - Authorization: []
      summary: ETH Generate receive wallet address
      tags:
      - ETH
  /fcm/token:
    get:
      consumes:
      - application/json
      description: FCM Token
      parameters:
      - description: Device Type
        in: query
        name: device_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.FirebaseRegistrationToken'
      security:
      - ApiKeyAuth: []
      summary: FCM Token
      tags:
      - FCM
    post:
      consumes:
      - application/json
      description: Create FCM Token
      parameters:
      - description: Create fcm request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateFcmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Create FCM Token
      tags:
      - FCM
  /fcm/token/data:
    post:
      consumes:
      - application/json
      description: Create FCM Token Test Data
      parameters:
      - description: Create fcm test data request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateFcmDataTest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Create FCM Token Test Data
      tags:
      - FCM
  /files:
    post:
      description: Upload file
      parameters:
      - description: file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.FileRes'
              type: object
      security:
      - Authorization: []
      summary: Upload file
      tags:
      - Files
  /files/deflate:
    post:
      description: Deflate a string
      parameters:
      - description: Data for minify
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structure.DeflateDataResp'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/structure.DeflateDataResp'
              type: object
      security:
      - Authorization: []
      summary: Deflate a string
      tags:
      - Files
  /files/image/resize:
    post:
      consumes:
      - application/json
      description: Upload file
      parameters:
      - description: Base64 File Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.FileResize'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/request.FileResize'
      summary: Upload file
      tags:
      - Files
  /files/minify:
    post:
      description: Upload file
      parameters:
      - description: Data for minify
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structure.MinifyDataResp'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.FileRes'
              type: object
      security:
      - Authorization: []
      summary: Upload file
      tags:
      - Files
  /files/multipart:
    post:
      consumes:
      - application/json
      description: Create multipart upload.
      parameters:
      - description: Create multipart upload request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateMultipartUploadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.FileResponse'
              type: object
      security:
      - Authorization: []
      summary: Create multipart upload
      tags:
      - Files
  /files/multipart/{uploadID}:
    post:
      consumes:
      - application/json
      description: Finish multipart upload
      parameters:
      - description: upload ID
        in: path
        name: uploadID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.MultipartUploadResponse'
              type: object
      security:
      - Authorization: []
      summary: Finish multipart upload
      tags:
      - Files
    put:
      description: Upload multipart file
      parameters:
      - description: file
        in: formData
        name: file
        required: true
        type: file
      - description: upload ID
        in: path
        name: uploadID
        required: true
        type: string
      - description: part number
        in: query
        name: partNumber
        type: string
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.FileRes'
              type: object
      security:
      - Authorization: []
      summary: Upload multipart file
      tags:
      - Files
  /inscribe/compress-image:
    post:
      consumes:
      - application/json
      description: compress-image
      parameters:
      - description: compress images
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CompressImageReq'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: compress-image
      tags:
      - compress-image
  /inscribe/info/{ID}:
    get:
      consumes:
      - application/json
      description: BTC Info Inscribe
      parameters:
      - description: inscribe ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.InscribeInfoResp'
      security:
      - ApiKeyAuth: []
      summary: BTC Info Inscribe
      tags:
      - Inscribe
  /inscribe/list:
    get:
      consumes:
      - application/json
      description: BTC List Inscribe
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Pagination'
      security:
      - ApiKeyAuth: []
      summary: BTC List Inscribe
      tags:
      - Inscribe
  /inscribe/nft-detail/{ID}:
    get:
      consumes:
      - application/json
      description: BTC NFT Detail Inscribe
      parameters:
      - description: inscribe ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.InscribeBTCResp'
      security:
      - ApiKeyAuth: []
      summary: BTC NFT Detail Inscribe
      tags:
      - Inscribe
  /inscribe/receive-address:
    post:
      consumes:
      - application/json
      description: BTC Generate receive wallet address
      parameters:
      - description: Create a btc wallet address request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateInscribeBtcReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.InscribeBtcResp'
      security:
      - ApiKeyAuth: []
      summary: BTC Generate receive wallet address
      tags:
      - Inscribe
  /inscribe/retry/{ID}:
    post:
      consumes:
      - application/json
      description: BTC Retry Inscribe
      parameters:
      - description: inscribe ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: BTC Retry Inscribe
      tags:
      - Inscribe
  /marketplace/listing/{genNFTAddr}/token/{tokenID}:
    get:
      consumes:
      - application/json
      description: Get market place listing
      parameters:
      - description: genNFTAddrress
        in: path
        name: genNFTAddr
        required: true
        type: string
      - description: tokenID
        in: path
        name: tokenID
        required: true
        type: string
      - description: true|false, default all
        in: query
        name: closed
        type: boolean
      - description: true|false, default all
        in: query
        name: finished
        type: boolean
      - description: sort by field
        in: query
        name: sort_by
        type: string
      - description: '1: ASC, -1: DESC'
        in: query
        name: sort
        type: integer
      - description: limit default 10
        in: query
        name: limit
        type: integer
      - description: page start with 1
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get market place listing
      tags:
      - MarketPlace
  /marketplace/offers/{genNFTAddr}/token/{tokenID}:
    get:
      consumes:
      - application/json
      description: Get market place offer
      parameters:
      - description: genNFTAddrress
        in: path
        name: genNFTAddr
        required: true
        type: string
      - description: tokenID
        in: path
        name: tokenID
        required: true
        type: string
      - description: true|false, default all
        in: query
        name: closed
        type: boolean
      - description: true|false, default all
        in: query
        name: finished
        type: boolean
      - description: sort by field
        in: query
        name: sort_by
        type: string
      - description: '1: ASC, -1: DESC'
        in: query
        name: sort
        type: integer
      - description: limit default 10
        in: query
        name: limit
        type: integer
      - description: page start with 1
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get market place offer
      tags:
      - MarketPlace
  /marketplace/stats/{genNFTAddr}:
    get:
      consumes:
      - application/json
      description: get project's detail
      parameters:
      - description: Gen NFT Addr
        in: path
        name: genNFTAddr
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get project's detail
      tags:
      - MarketPlace
  /marketplace/stats/{genNFTAddr}/first-sale:
    get:
      consumes:
      - application/json
      description: get project's first-sale
      parameters:
      - description: Gen NFT Addr
        in: path
        name: genNFTAddr
        required: true
        type: string
      - description: ignore cache
        in: query
        name: refresh
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get project's first-sale
      tags:
      - MarketPlace
  /marketplace/wallet/{walletAddress}/listing:
    get:
      consumes:
      - application/json
      description: User profile's selling nft
      parameters:
      - description: Wallet address
        in: path
        name: walletAddress
        required: true
        type: string
      - description: sort by field
        in: query
        name: sort_by
        type: string
      - description: '1: ASC, -1: DESC'
        in: query
        name: sort
        type: integer
      - description: limit default 10
        in: query
        name: limit
        type: integer
      - description: page start with 1
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.InternalTokenURIResp'
              type: object
      summary: User profile's selling nft
      tags:
      - MarketPlace
  /marketplace/wallet/{walletAddress}/offer:
    get:
      consumes:
      - application/json
      description: User profile's selling nft
      parameters:
      - description: Wallet address
        in: path
        name: walletAddress
        required: true
        type: string
      - description: If is_nft_owner == true, get offer that offer to walletAddress's
          nft
        in: query
        name: is_nft_owner
        type: string
      - description: sort by field
        in: query
        name: sort_by
        type: string
      - description: '1: ASC, -1: DESC'
        in: query
        name: sort
        type: integer
      - description: limit default 10
        in: query
        name: limit
        type: integer
      - description: page start with 1
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.InternalTokenURIResp'
              type: object
      summary: User profile's selling nft
      tags:
      - MarketPlace
  /mint-nft-btc/receive-address:
    delete:
      consumes:
      - application/json
      description: cancel the mint request
      parameters:
      - description: Create a btc/eth wallet address request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateBtcWalletAddressReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: cancel the mint request
      tags:
      - BTC/ETH
    post:
      consumes:
      - application/json
      description: Generate receive wallet address
      parameters:
      - description: Create a btc/eth wallet address request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateBtcWalletAddressReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: BTC/ETH Generate receive wallet address
      tags:
      - BTC/ETH
  /nfts/{contractAddress}/nft_holders:
    get:
      consumes:
      - application/json
      description: get token holder
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get token holder
      tags:
      - Blockchain
  /nfts/{contractAddress}/transactions/{tokenID}:
    get:
      consumes:
      - application/json
      description: get nft transactions
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      - description: token ID
        in: path
        name: tokenID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get nft transactions
      tags:
      - Blockchain
  /ordinal/collections:
    post:
      description: Upload ordinal template
      parameters:
      - description: project.zip
        in: formData
        name: file
        required: true
        type: file
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.CategoryResp'
              type: object
      summary: Upload ordinal template
      tags:
      - Ordinal collection
  /ordinal/collections/template:
    get:
      consumes:
      - application/json
      description: get ordinal template
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.CategoryResp'
              type: object
      summary: get ordinal template
      tags:
      - Ordinal collection
  /profile:
    get:
      consumes:
      - application/json
      description: User profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.ProfileResponse'
              type: object
      security:
      - Authorization: []
      summary: User profile
      tags:
      - Profile
    put:
      consumes:
      - application/json
      description: Edit User profile
      parameters:
      - description: Update profile request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.ProfileResponse'
              type: object
      security:
      - Authorization: []
      summary: Edit User profile
      tags:
      - Profile
  /profile/logout:
    post:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.LogoutResponse'
              type: object
      security:
      - Authorization: []
      summary: Logout
      tags:
      - Profile
  /profile/projects:
    get:
      consumes:
      - application/json
      description: Get current user's projects
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: The cursor returned in the previous response (used for getting
          the next page).
        in: query
        name: cursor
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.ProjectResp'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get current user's projects
      tags:
      - Profile
  /profile/wallet/{walletAddress}:
    get:
      consumes:
      - application/json
      description: User profile via wallet address
      parameters:
      - description: Wallet address
        in: path
        name: walletAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.ProfileResponse'
              type: object
      summary: User profile via wallet address
      tags:
      - Profile
  /profile/wallet/{walletAddress}/nfts:
    get:
      consumes:
      - application/json
      description: User profile's nft
      parameters:
      - description: Filter via tokenID
        in: path
        name: tokenID
        type: string
      - description: Wallet address
        in: path
        name: walletAddress
        required: true
        type: string
      - description: contract_address
        in: query
        name: contract_address
        type: string
      - description: gen_nft_address
        in: query
        name: gen_nft_address
        type: string
      - description: owner_address
        in: query
        name: owner_address
        type: string
      - description: creator_address
        in: query
        name: creator_address
        type: string
      - description: Filter via tokenID
        in: query
        name: tokenID
        type: string
      - description: newest, minted-newest, priority-asc, priority-desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.InternalTokenURIResp'
              type: object
      summary: User profile's nft
      tags:
      - Profile
  /profile/wallet/{walletAddress}/projects:
    get:
      consumes:
      - application/json
      description: get  projects by wallet
      parameters:
      - description: Filter project via wallet address
        in: path
        name: walletAddress
        type: string
      - description: status
        in: query
        name: status
        type: boolean
      - description: isSynced
        in: query
        name: isSynced
        type: boolean
      - description: limit
        in: query
        name: limit
        type: integer
      - description: The cursor returned in the previous response (used for getting
          the next page).
        in: query
        name: cursor
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get  projects by wallet
      tags:
      - Profile
  /profile/wallet/{walletAddress}/volumn:
    get:
      consumes:
      - application/json
      description: get volume by wallet
      parameters:
      - description: Filter project via wallet address
        in: path
        name: walletAddress
        type: string
      - description: payType eth|btc
        in: query
        name: payType
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: The cursor returned in the previous response (used for getting
          the next page).
        in: query
        name: cursor
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get volume by wallet
      tags:
      - Profile
  /profile/withdraw:
    post:
      consumes:
      - application/json
      description: User profile via wallet address
      parameters:
      - description: Withdraw request
        in: body
        name: WithDrawItemRequest
        required: true
        schema:
          $ref: '#/definitions/request.WithDrawItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.ProfileResponse'
              type: object
      security:
      - Authorization: []
      summary: User profile via wallet address
      tags:
      - Profile
  /project:
    get:
      consumes:
      - application/json
      description: get projects
      parameters:
      - description: Filter project via contract address
        in: query
        name: contractAddress
        type: string
      - description: filter project via name
        in: query
        name: name
        type: string
      - description: filter project via category ids
        in: query
        name: category
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: limit
        in: query
        name: page
        type: integer
      - description: newest, oldest, priority-asc, priority-desc, trending-score
        in: query
        name: sort
        type: string
      - description: The cursor returned in the previous response (used for getting
          the next page).
        in: query
        name: cursor
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get projects
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: Create projects
      parameters:
      - description: Create eth-project request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateETHProjectReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - Authorization: []
      summary: Create project
      tags:
      - ETH Project
  /project/{contractAddress}/{projectID}:
    delete:
      consumes:
      - application/json
      description: Delete BTC projects
      parameters:
      - description: contract adress
        in: path
        name: contractAddress
        required: true
        type: string
      - description: projectID adress
        in: path
        name: projectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - Authorization: []
      summary: Delete BTC project
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: Update projects
      parameters:
      - description: Create profile request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateProjectReq'
      - description: contract adress
        in: path
        name: contractAddress
        required: true
        type: string
      - description: projectID adress
        in: path
        name: projectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Update project
      tags:
      - Project
  /project/{contractAddress}/{projectID}/allow-list:
    get:
      consumes:
      - application/json
      description: Check project's allow list
      parameters:
      - description: contractAddress request
        in: path
        name: contractAddress
        required: true
        type: string
      - description: projectID request
        in: path
        name: projectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - Authorization: []
      summary: Check project's allow list
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: Create project's allow list
      parameters:
      - description: contractAddress request
        in: path
        name: contractAddress
        required: true
        type: string
      - description: projectID request
        in: path
        name: projectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - Authorization: []
      summary: Create project's allow list
      tags:
      - Project
  /project/{contractAddress}/{projectID}/categories:
    put:
      consumes:
      - application/json
      description: Update project's categories
      parameters:
      - description: UpdateBTCProjectCategoriesReq
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateBTCProjectCategoriesReq'
      - description: contract adress
        in: path
        name: contractAddress
        required: true
        type: string
      - description: projectID adress
        in: path
        name: projectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Update project's categories
      tags:
      - Project
  /project/{contractAddress}/{projectID}/token:
    get:
      consumes:
      - application/json
      description: Search Token
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      - description: projectID request
        in: path
        name: projectID
        required: true
        type: string
      - description: contractAddress request
        in: path
        name: contractAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Search Token
      tags:
      - Search
  /project/{contractAddress}/{projectID}/token-onwers/analytics:
    get:
      consumes:
      - application/json
      description: Calculate Token's Onwers by project
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      - description: projectID request
        in: path
        name: projectID
        required: true
        type: string
      - description: contractAddress request
        in: path
        name: contractAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Calculate Token's Onwers by project
      tags:
      - Project
  /project/{contractAddress}/tokens/{projectID}:
    get:
      consumes:
      - application/json
      description: get project's detail
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      - description: token ID
        in: path
        name: projectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get project's detail
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: update btc project
      parameters:
      - description: Update project request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateBTCProjectReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - Authorization: []
      summary: update a btc project
      tags:
      - Project
  /project/{contractAddress}/tokens/{projectID}/random-images:
    get:
      consumes:
      - application/json
      description: get project's random-images
      parameters:
      - description: payType eth|btc
        in: query
        name: payType
        type: string
      - description: contractAddress
        in: path
        name: contractAddress
        required: true
        type: string
      - description: token ID
        in: path
        name: projectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get project's random-images
      tags:
      - Project
  /project/{contractAddress}/tokens/{projectID}/token-traits:
    get:
      consumes:
      - application/json
      description: get project's token-traits
      parameters:
      - description: only tokens which don't have any trait are exported
        in: query
        name: empty-trait
        type: boolean
      - description: contractAddress
        in: path
        name: contractAddress
        required: true
        type: string
      - description: token ID
        in: path
        name: projectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get project's token-traits
      tags:
      - Project
    post:
      description: upload project's token-traits
      parameters:
      - description: file
        in: formData
        name: file
        required: true
        type: file
      - description: contractAddress
        in: path
        name: contractAddress
        required: true
        type: string
      - description: token ID
        in: path
        name: projectID
        required: true
        type: string
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: upload project's token-traits
      tags:
      - Project
  /project/{contractAddress}/tokens/{projectID}/volumn:
    get:
      consumes:
      - application/json
      description: get project's volumn
      parameters:
      - description: payType eth|btc
        in: query
        name: payType
        type: string
      - description: contractAddress
        in: path
        name: contractAddress
        required: true
        type: string
      - description: token ID
        in: path
        name: projectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get project's volumn
      tags:
      - Project
  /project/{contractAddress}/tx-hash/{txHash}:
    put:
      consumes:
      - application/json
      description: Update project's hash via txHasg
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structure.UpdateProjectHash'
      - description: contract adress
        in: path
        name: contractAddress
        required: true
        type: string
      - description: txHash adress
        in: path
        name: txHash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Update project's hash
      tags:
      - Project
  /project/{genNFTAddr}/tokens:
    get:
      consumes:
      - application/json
      description: get tokens by project address
      parameters:
      - description: contract_address
        in: query
        name: contract_address
        type: string
      - description: gen_nft_address
        in: query
        name: gen_nft_address
        type: string
      - description: owner_address
        in: query
        name: owner_address
        type: string
      - description: creator_address
        in: query
        name: creator_address
        type: string
      - description: Filter via tokenID
        in: query
        name: tokenID
        type: string
      - collectionFormat: csv
        description: attributes
        in: query
        items:
          type: string
        name: attributes
        type: array
      - description: has_price
        in: query
        name: has_price
        type: boolean
      - description: from_price
        in: query
        name: from_price
        type: string
      - description: to_price
        in: query
        name: to_price
        type: string
      - description: newest, minted-newest, token-price-asc, token-price-desc
        in: query
        name: sort
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: The cursor returned in the previous response (used for getting
          the next page).
        in: query
        name: cursor
        type: string
      - description: This is provided from Project Detail API
        in: path
        name: genNFTAddr
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get project's tokens
      tags:
      - Project
  /project/{projectID}/report:
    post:
      consumes:
      - application/json
      description: Update projects
      parameters:
      - description: projectID adress
        in: path
        name: projectID
        required: true
        type: string
      - description: Report Project request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ReportProjectReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - Authorization: []
      summary: Update project
      tags:
      - Project
  /project/all:
    get:
      consumes:
      - application/json
      description: get all projects without project's status
      parameters:
      - description: Filter project via contract address
        in: query
        name: contractAddress
        type: string
      - description: filter project via name
        in: query
        name: name
        type: string
      - description: filter project via category ids
        in: query
        name: category
        type: string
      - description: txHash
        in: query
        name: txHash
        type: string
      - description: commitTxHash
        in: query
        name: commitTxHash
        type: string
      - description: txHex
        in: query
        name: txHex
        type: string
      - description: revealTxHash
        in: query
        name: revealTxHash
        type: string
      - description: walletAddress
        in: query
        name: walletAddress
        type: string
      - description: status
        in: query
        name: status
        type: boolean
      - description: isSynced
        in: query
        name: isSynced
        type: boolean
      - description: isHidden
        in: query
        name: isHidden
        type: boolean
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      - description: newest, oldest, priority-asc, priority-desc, trending-score
        in: query
        name: sort
        type: string
      - description: The cursor returned in the previous response (used for getting
          the next page).
        in: query
        name: cursor
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get all projects
      tags:
      - Project
  /project/btc:
    post:
      consumes:
      - application/json
      description: Create btc project
      parameters:
      - description: Create profile request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateBTCProjectReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - Authorization: []
      summary: Create btc project
      tags:
      - Project
  /project/btc/files:
    post:
      description: Upload images for a project
      parameters:
      - description: Project's name
        in: formData
        name: projectName
        required: true
        type: string
      - description: file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.FileRes'
              type: object
      summary: Upload images for a project
      tags:
      - Project
  /project/minted-out:
    get:
      parameters:
      - description: The cursor returned in the previous response (used for getting
          the next page).
        in: query
        name: cursor
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
  /project/random:
    get:
      consumes:
      - application/json
      description: get the random projects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get the random projects
      tags:
      - Project
  /project/recent-works:
    get:
      consumes:
      - application/json
      description: get the recent work projects (posible of minted out)
      parameters:
      - description: Filter project via contract address
        in: query
        name: contractAddress
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: The cursor returned in the previous response (used for getting
          the next page).
        in: query
        name: cursor
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get the recent work projects
      tags:
      - Project
  /project/upcomming:
    get:
      consumes:
      - application/json
      description: upcomming get projects
      parameters:
      - description: Filter project via contract address
        in: query
        name: contractAddress
        type: string
      - description: filter project via name
        in: query
        name: name
        type: string
      - description: filter project via category ids
        in: query
        name: category
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: limit
        in: query
        name: page
        type: integer
      - description: newest, oldest, priority-asc, priority-desc, trending-score
        in: query
        name: sort
        type: string
      - description: The cursor returned in the previous response (used for getting
          the next page).
        in: query
        name: cursor
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get upcomming projects
      tags:
      - Project
  /referrals:
    get:
      consumes:
      - application/json
      description: get referrals
      parameters:
      - description: Filter by referrerID
        in: query
        name: referrerID
        type: string
      - description: filter by referreeID
        in: query
        name: referreeID
        type: string
      - description: filter by amountType
        in: query
        name: amountType
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - Authorization: []
      summary: get referrals
      tags:
      - Referral
  /referrals/{referrerID}:
    post:
      consumes:
      - application/json
      description: Create referral
      parameters:
      - description: referrerID
        in: path
        name: referrerID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  type: boolean
              type: object
      security:
      - Authorization: []
      summary: Create referral
      tags:
      - Referral
  /search:
    get:
      consumes:
      - application/json
      description: Search
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      - description: object type
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Search
      tags:
      - Search
  /token-activities:
    get:
      consumes:
      - application/json
      description: get referrals
      parameters:
      - description: token inscription ID
        in: query
        name: inscription_id
        type: string
      - description: project
        in: query
        name: project_id
        type: string
      - description: activity types
        in: query
        name: types
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get referrals
      tags:
      - Token Activities
  /token-moralis/nfts:
    get:
      consumes:
      - application/json
      description: List NFT from Moralis
      parameters:
      - description: Wallet Address
        in: query
        name: walletAddress
        type: string
      - description: Last Id
        in: query
        name: cursor
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Pagination'
      security:
      - ApiKeyAuth: []
      summary: List NFT from Moralis
      tags:
      - Token Moralis
  /token-moralis/nfts/{tokenAddress}:
    get:
      consumes:
      - application/json
      description: NFT from Moralis
      parameters:
      - description: Token Address
        in: path
        name: tokenAddress
        type: string
      - description: Token Id
        in: query
        name: tokenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/nfts.MoralisToken'
      security:
      - ApiKeyAuth: []
      summary: NFT from Moralis
      tags:
      - Token Moralis
  /token-uri:
    get:
      consumes:
      - application/json
      description: get tokenUris
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      - description: The cursor returned in the previous response (used for getting
          the next page).
        in: query
        name: cursor
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get list tokenUris
      tags:
      - TokenUri
  /token/{contractAddress}/{tokenID}:
    get:
      consumes:
      - application/json
      description: get token uri data
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      - description: token ID
        in: path
        name: tokenID
        required: true
        type: string
      - description: Capture timeout
        in: query
        name: captureTimeout
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.TokenURIResp'
              type: object
      summary: get token uri data
      tags:
      - Token for Opensea
  /tokens:
    get:
      consumes:
      - application/json
      description: get tokens
      parameters:
      - description: contract_address
        in: query
        name: contract_address
        type: string
      - description: gen_nft_address
        in: query
        name: gen_nft_address
        type: string
      - description: owner_address
        in: query
        name: owner_address
        type: string
      - description: creator_address
        in: query
        name: creator_address
        type: string
      - description: Filter via tokenID
        in: query
        name: tokenID
        type: string
      - description: newest, minted-newest, priority-asc, priority-desc
        in: query
        name: sort
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: The cursor returned in the previous response (used for getting
          the next page).
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get tokens
      tags:
      - Tokens
  /tokens/{contractAddress}/{tokenID}:
    get:
      consumes:
      - application/json
      description: get token uri data
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      - description: token ID
        in: path
        name: tokenID
        required: true
        type: string
      - description: Capture timeout
        in: query
        name: captureTimeout
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.InternalTokenURIResp'
              type: object
      summary: get token uri data
      tags:
      - Tokens
    put:
      consumes:
      - application/json
      description: get token uri data
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      - description: token ID
        in: path
        name: tokenID
        required: true
        type: string
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateTokentReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.InternalTokenURIResp'
              type: object
      summary: get token uri data
      tags:
      - Tokens
  /tokens/{tokenID}/thumbnail:
    post:
      consumes:
      - application/json
      description: Update token's thumbnail
      parameters:
      - description: token ID
        in: path
        name: tokenID
        required: true
        type: string
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateTokenThumbnailReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.InternalTokenURIResp'
              type: object
      summary: Update token's thumbnail
      tags:
      - Tokens
  /tokens/traits/{contractAddress}/{tokenID}:
    get:
      consumes:
      - application/json
      description: get token's traits
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      - description: token ID
        in: path
        name: tokenID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.InternalTokenTraitsResp'
              type: object
      summary: get token's traits
      tags:
      - Tokens
  /trait/{contractAddress}/{tokenID}:
    get:
      consumes:
      - application/json
      description: get token's traits
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      - description: token ID
        in: path
        name: tokenID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.TokenTraitsResp'
              type: object
      summary: get token's traits
      tags:
      - Token for Opensea
  /user:
    get:
      consumes:
      - application/json
      description: get users
      parameters:
      - description: Filter project via contract address
        in: query
        name: search
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: limit
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get users
      tags:
      - User
  /user/artist:
    get:
      consumes:
      - application/json
      description: get list Artist
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: get list Artist
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
