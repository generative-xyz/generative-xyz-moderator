// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetNonceMessageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNonceMessageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNonceMessageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNonceMessageReqMultiError, or nil if none found.
func (m *GetNonceMessageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNonceMessageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	if len(errors) > 0 {
		return GetNonceMessageReqMultiError(errors)
	}

	return nil
}

// GetNonceMessageReqMultiError is an error wrapping multiple validation errors
// returned by GetNonceMessageReq.ValidateAll() if the designated constraints
// aren't met.
type GetNonceMessageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNonceMessageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNonceMessageReqMultiError) AllErrors() []error { return m }

// GetNonceMessageReqValidationError is the validation error returned by
// GetNonceMessageReq.Validate if the designated constraints aren't met.
type GetNonceMessageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNonceMessageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNonceMessageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNonceMessageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNonceMessageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNonceMessageReqValidationError) ErrorName() string {
	return "GetNonceMessageReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetNonceMessageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNonceMessageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNonceMessageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNonceMessageReqValidationError{}

// Validate checks the field values on GetNonceMessageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNonceMessageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNonceMessageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNonceMessageRespMultiError, or nil if none found.
func (m *GetNonceMessageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNonceMessageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return GetNonceMessageRespMultiError(errors)
	}

	return nil
}

// GetNonceMessageRespMultiError is an error wrapping multiple validation
// errors returned by GetNonceMessageResp.ValidateAll() if the designated
// constraints aren't met.
type GetNonceMessageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNonceMessageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNonceMessageRespMultiError) AllErrors() []error { return m }

// GetNonceMessageRespValidationError is the validation error returned by
// GetNonceMessageResp.Validate if the designated constraints aren't met.
type GetNonceMessageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNonceMessageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNonceMessageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNonceMessageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNonceMessageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNonceMessageRespValidationError) ErrorName() string {
	return "GetNonceMessageRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetNonceMessageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNonceMessageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNonceMessageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNonceMessageRespValidationError{}

// Validate checks the field values on VerifyNonceMessageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyNonceMessageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyNonceMessageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyNonceMessageReqMultiError, or nil if none found.
func (m *VerifyNonceMessageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyNonceMessageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Signature

	if len(errors) > 0 {
		return VerifyNonceMessageReqMultiError(errors)
	}

	return nil
}

// VerifyNonceMessageReqMultiError is an error wrapping multiple validation
// errors returned by VerifyNonceMessageReq.ValidateAll() if the designated
// constraints aren't met.
type VerifyNonceMessageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyNonceMessageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyNonceMessageReqMultiError) AllErrors() []error { return m }

// VerifyNonceMessageReqValidationError is the validation error returned by
// VerifyNonceMessageReq.Validate if the designated constraints aren't met.
type VerifyNonceMessageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyNonceMessageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyNonceMessageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyNonceMessageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyNonceMessageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyNonceMessageReqValidationError) ErrorName() string {
	return "VerifyNonceMessageReqValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyNonceMessageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyNonceMessageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyNonceMessageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyNonceMessageReqValidationError{}

// Validate checks the field values on VerifyNonceMessageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyNonceMessageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyNonceMessageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyNonceMessageRespMultiError, or nil if none found.
func (m *VerifyNonceMessageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyNonceMessageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return VerifyNonceMessageRespMultiError(errors)
	}

	return nil
}

// VerifyNonceMessageRespMultiError is an error wrapping multiple validation
// errors returned by VerifyNonceMessageResp.ValidateAll() if the designated
// constraints aren't met.
type VerifyNonceMessageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyNonceMessageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyNonceMessageRespMultiError) AllErrors() []error { return m }

// VerifyNonceMessageRespValidationError is the validation error returned by
// VerifyNonceMessageResp.Validate if the designated constraints aren't met.
type VerifyNonceMessageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyNonceMessageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyNonceMessageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyNonceMessageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyNonceMessageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyNonceMessageRespValidationError) ErrorName() string {
	return "VerifyNonceMessageRespValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyNonceMessageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyNonceMessageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyNonceMessageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyNonceMessageRespValidationError{}

// Validate checks the field values on UserProfileReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserProfileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserProfileReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserProfileReqMultiError,
// or nil if none found.
func (m *UserProfileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserProfileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserProfileReqMultiError(errors)
	}

	return nil
}

// UserProfileReqMultiError is an error wrapping multiple validation errors
// returned by UserProfileReq.ValidateAll() if the designated constraints
// aren't met.
type UserProfileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProfileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProfileReqMultiError) AllErrors() []error { return m }

// UserProfileReqValidationError is the validation error returned by
// UserProfileReq.Validate if the designated constraints aren't met.
type UserProfileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProfileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProfileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProfileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProfileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProfileReqValidationError) ErrorName() string { return "UserProfileReqValidationError" }

// Error satisfies the builtin error interface
func (e UserProfileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProfileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProfileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProfileReqValidationError{}

// Validate checks the field values on UpdateUserProfileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserProfileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserProfileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserProfileReqMultiError, or nil if none found.
func (m *UpdateUserProfileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserProfileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return UpdateUserProfileReqMultiError(errors)
	}

	return nil
}

// UpdateUserProfileReqMultiError is an error wrapping multiple validation
// errors returned by UpdateUserProfileReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserProfileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserProfileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserProfileReqMultiError) AllErrors() []error { return m }

// UpdateUserProfileReqValidationError is the validation error returned by
// UpdateUserProfileReq.Validate if the designated constraints aren't met.
type UpdateUserProfileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserProfileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserProfileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserProfileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserProfileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserProfileReqValidationError) ErrorName() string {
	return "UpdateUserProfileReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserProfileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserProfileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserProfileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserProfileReqValidationError{}

// Validate checks the field values on UserProfileResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserProfileResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserProfileResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserProfileRespMultiError, or nil if none found.
func (m *UserProfileResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserProfileResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for WalletAddress

	if len(errors) > 0 {
		return UserProfileRespMultiError(errors)
	}

	return nil
}

// UserProfileRespMultiError is an error wrapping multiple validation errors
// returned by UserProfileResp.ValidateAll() if the designated constraints
// aren't met.
type UserProfileRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProfileRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProfileRespMultiError) AllErrors() []error { return m }

// UserProfileRespValidationError is the validation error returned by
// UserProfileResp.Validate if the designated constraints aren't met.
type UserProfileRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProfileRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProfileRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProfileRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProfileRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProfileRespValidationError) ErrorName() string { return "UserProfileRespValidationError" }

// Error satisfies the builtin error interface
func (e UserProfileRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProfileResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProfileRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProfileRespValidationError{}
