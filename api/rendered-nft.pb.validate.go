// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rendered-nft.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetRenderedNftRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRenderedNftRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRenderedNftRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRenderedNftRequestMultiError, or nil if none found.
func (m *GetRenderedNftRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRenderedNftRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChainId

	// no validation rules for ContractAddress

	// no validation rules for ProjectId

	// no validation rules for TokenId

	if len(errors) > 0 {
		return GetRenderedNftRequestMultiError(errors)
	}

	return nil
}

// GetRenderedNftRequestMultiError is an error wrapping multiple validation
// errors returned by GetRenderedNftRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRenderedNftRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRenderedNftRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRenderedNftRequestMultiError) AllErrors() []error { return m }

// GetRenderedNftRequestValidationError is the validation error returned by
// GetRenderedNftRequest.Validate if the designated constraints aren't met.
type GetRenderedNftRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRenderedNftRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRenderedNftRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRenderedNftRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRenderedNftRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRenderedNftRequestValidationError) ErrorName() string {
	return "GetRenderedNftRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRenderedNftRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRenderedNftRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRenderedNftRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRenderedNftRequestValidationError{}

// Validate checks the field values on OpenSeaAttribute with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OpenSeaAttribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenSeaAttribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenSeaAttributeMultiError, or nil if none found.
func (m *OpenSeaAttribute) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenSeaAttribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TraitType

	// no validation rules for Value

	if len(errors) > 0 {
		return OpenSeaAttributeMultiError(errors)
	}

	return nil
}

// OpenSeaAttributeMultiError is an error wrapping multiple validation errors
// returned by OpenSeaAttribute.ValidateAll() if the designated constraints
// aren't met.
type OpenSeaAttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenSeaAttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenSeaAttributeMultiError) AllErrors() []error { return m }

// OpenSeaAttributeValidationError is the validation error returned by
// OpenSeaAttribute.Validate if the designated constraints aren't met.
type OpenSeaAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenSeaAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenSeaAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenSeaAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenSeaAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenSeaAttributeValidationError) ErrorName() string { return "OpenSeaAttributeValidationError" }

// Error satisfies the builtin error interface
func (e OpenSeaAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenSeaAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenSeaAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenSeaAttributeValidationError{}

// Validate checks the field values on GetRenderedNftResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRenderedNftResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRenderedNftResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRenderedNftResponseMultiError, or nil if none found.
func (m *GetRenderedNftResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRenderedNftResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for AnimationUrl

	// no validation rules for ExternalLink

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRenderedNftResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRenderedNftResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRenderedNftResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return GetRenderedNftResponseMultiError(errors)
	}

	return nil
}

// GetRenderedNftResponseMultiError is an error wrapping multiple validation
// errors returned by GetRenderedNftResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRenderedNftResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRenderedNftResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRenderedNftResponseMultiError) AllErrors() []error { return m }

// GetRenderedNftResponseValidationError is the validation error returned by
// GetRenderedNftResponse.Validate if the designated constraints aren't met.
type GetRenderedNftResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRenderedNftResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRenderedNftResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRenderedNftResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRenderedNftResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRenderedNftResponseValidationError) ErrorName() string {
	return "GetRenderedNftResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRenderedNftResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRenderedNftResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRenderedNftResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRenderedNftResponseValidationError{}

// Validate checks the field values on GetCandyMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCandyMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCandyMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCandyMetadataRequestMultiError, or nil if none found.
func (m *GetCandyMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCandyMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChainId

	// no validation rules for ContractAddress

	// no validation rules for ProjectId

	// no validation rules for TokenId

	if len(errors) > 0 {
		return GetCandyMetadataRequestMultiError(errors)
	}

	return nil
}

// GetCandyMetadataRequestMultiError is an error wrapping multiple validation
// errors returned by GetCandyMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCandyMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCandyMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCandyMetadataRequestMultiError) AllErrors() []error { return m }

// GetCandyMetadataRequestValidationError is the validation error returned by
// GetCandyMetadataRequest.Validate if the designated constraints aren't met.
type GetCandyMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCandyMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCandyMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCandyMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCandyMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCandyMetadataRequestValidationError) ErrorName() string {
	return "GetCandyMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCandyMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCandyMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCandyMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCandyMetadataRequestValidationError{}

// Validate checks the field values on GetCandyMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCandyMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCandyMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCandyMetadataResponseMultiError, or nil if none found.
func (m *GetCandyMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCandyMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for AnimationUrl

	// no validation rules for ExternalLink

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCandyMetadataResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCandyMetadataResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCandyMetadataResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return GetCandyMetadataResponseMultiError(errors)
	}

	return nil
}

// GetCandyMetadataResponseMultiError is an error wrapping multiple validation
// errors returned by GetCandyMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCandyMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCandyMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCandyMetadataResponseMultiError) AllErrors() []error { return m }

// GetCandyMetadataResponseValidationError is the validation error returned by
// GetCandyMetadataResponse.Validate if the designated constraints aren't met.
type GetCandyMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCandyMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCandyMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCandyMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCandyMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCandyMetadataResponseValidationError) ErrorName() string {
	return "GetCandyMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCandyMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCandyMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCandyMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCandyMetadataResponseValidationError{}

// Validate checks the field values on GetCandyMetadatasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCandyMetadatasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCandyMetadatasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCandyMetadatasRequestMultiError, or nil if none found.
func (m *GetCandyMetadatasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCandyMetadatasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChainId

	// no validation rules for ContractAddress

	// no validation rules for ProjectId

	// no validation rules for TokenIds

	if len(errors) > 0 {
		return GetCandyMetadatasRequestMultiError(errors)
	}

	return nil
}

// GetCandyMetadatasRequestMultiError is an error wrapping multiple validation
// errors returned by GetCandyMetadatasRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCandyMetadatasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCandyMetadatasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCandyMetadatasRequestMultiError) AllErrors() []error { return m }

// GetCandyMetadatasRequestValidationError is the validation error returned by
// GetCandyMetadatasRequest.Validate if the designated constraints aren't met.
type GetCandyMetadatasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCandyMetadatasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCandyMetadatasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCandyMetadatasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCandyMetadatasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCandyMetadatasRequestValidationError) ErrorName() string {
	return "GetCandyMetadatasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCandyMetadatasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCandyMetadatasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCandyMetadatasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCandyMetadatasRequestValidationError{}

// Validate checks the field values on GetCandyMetadatasResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCandyMetadatasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCandyMetadatasResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCandyMetadatasResponseMultiError, or nil if none found.
func (m *GetCandyMetadatasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCandyMetadatasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMetadatas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCandyMetadatasResponseValidationError{
						field:  fmt.Sprintf("Metadatas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCandyMetadatasResponseValidationError{
						field:  fmt.Sprintf("Metadatas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCandyMetadatasResponseValidationError{
					field:  fmt.Sprintf("Metadatas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCandyMetadatasResponseMultiError(errors)
	}

	return nil
}

// GetCandyMetadatasResponseMultiError is an error wrapping multiple validation
// errors returned by GetCandyMetadatasResponse.ValidateAll() if the
// designated constraints aren't met.
type GetCandyMetadatasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCandyMetadatasResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCandyMetadatasResponseMultiError) AllErrors() []error { return m }

// GetCandyMetadatasResponseValidationError is the validation error returned by
// GetCandyMetadatasResponse.Validate if the designated constraints aren't met.
type GetCandyMetadatasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCandyMetadatasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCandyMetadatasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCandyMetadatasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCandyMetadatasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCandyMetadatasResponseValidationError) ErrorName() string {
	return "GetCandyMetadatasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCandyMetadatasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCandyMetadatasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCandyMetadatasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCandyMetadatasResponseValidationError{}

// Validate checks the field values on GetAvatarMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAvatarMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvatarMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAvatarMetadataResponseMultiError, or nil if none found.
func (m *GetAvatarMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvatarMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for AnimationUrl

	// no validation rules for ExternalLink

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAvatarMetadataResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAvatarMetadataResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAvatarMetadataResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GlbUrl

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.BackgroundColor != nil {
		// no validation rules for BackgroundColor
	}

	if len(errors) > 0 {
		return GetAvatarMetadataResponseMultiError(errors)
	}

	return nil
}

// GetAvatarMetadataResponseMultiError is an error wrapping multiple validation
// errors returned by GetAvatarMetadataResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAvatarMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvatarMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvatarMetadataResponseMultiError) AllErrors() []error { return m }

// GetAvatarMetadataResponseValidationError is the validation error returned by
// GetAvatarMetadataResponse.Validate if the designated constraints aren't met.
type GetAvatarMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvatarMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvatarMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvatarMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvatarMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvatarMetadataResponseValidationError) ErrorName() string {
	return "GetAvatarMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvatarMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvatarMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvatarMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvatarMetadataResponseValidationError{}

// Validate checks the field values on GetAvatarMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAvatarMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvatarMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAvatarMetadataRequestMultiError, or nil if none found.
func (m *GetAvatarMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvatarMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChainId

	// no validation rules for ContractAddress

	// no validation rules for ProjectId

	// no validation rules for TokenId

	if len(errors) > 0 {
		return GetAvatarMetadataRequestMultiError(errors)
	}

	return nil
}

// GetAvatarMetadataRequestMultiError is an error wrapping multiple validation
// errors returned by GetAvatarMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAvatarMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvatarMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvatarMetadataRequestMultiError) AllErrors() []error { return m }

// GetAvatarMetadataRequestValidationError is the validation error returned by
// GetAvatarMetadataRequest.Validate if the designated constraints aren't met.
type GetAvatarMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvatarMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvatarMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvatarMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvatarMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvatarMetadataRequestValidationError) ErrorName() string {
	return "GetAvatarMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvatarMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvatarMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvatarMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvatarMetadataRequestValidationError{}

// Validate checks the field values on GetGenerativeNFTMetadataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetGenerativeNFTMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGenerativeNFTMetadataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetGenerativeNFTMetadataResponseMultiError, or nil if none found.
func (m *GetGenerativeNFTMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGenerativeNFTMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for AnimationUrl

	// no validation rules for ExternalLink

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGenerativeNFTMetadataResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGenerativeNFTMetadataResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGenerativeNFTMetadataResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GlbUrl

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.BackgroundColor != nil {
		// no validation rules for BackgroundColor
	}

	if len(errors) > 0 {
		return GetGenerativeNFTMetadataResponseMultiError(errors)
	}

	return nil
}

// GetGenerativeNFTMetadataResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetGenerativeNFTMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGenerativeNFTMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGenerativeNFTMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGenerativeNFTMetadataResponseMultiError) AllErrors() []error { return m }

// GetGenerativeNFTMetadataResponseValidationError is the validation error
// returned by GetGenerativeNFTMetadataResponse.Validate if the designated
// constraints aren't met.
type GetGenerativeNFTMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGenerativeNFTMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGenerativeNFTMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGenerativeNFTMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGenerativeNFTMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGenerativeNFTMetadataResponseValidationError) ErrorName() string {
	return "GetGenerativeNFTMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGenerativeNFTMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGenerativeNFTMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGenerativeNFTMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGenerativeNFTMetadataResponseValidationError{}

// Validate checks the field values on GetGenerativeNFTMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGenerativeNFTMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGenerativeNFTMetadataRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetGenerativeNFTMetadataRequestMultiError, or nil if none found.
func (m *GetGenerativeNFTMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGenerativeNFTMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChainId

	// no validation rules for ContractAddress

	// no validation rules for TokenId

	if len(errors) > 0 {
		return GetGenerativeNFTMetadataRequestMultiError(errors)
	}

	return nil
}

// GetGenerativeNFTMetadataRequestMultiError is an error wrapping multiple
// validation errors returned by GetGenerativeNFTMetadataRequest.ValidateAll()
// if the designated constraints aren't met.
type GetGenerativeNFTMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGenerativeNFTMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGenerativeNFTMetadataRequestMultiError) AllErrors() []error { return m }

// GetGenerativeNFTMetadataRequestValidationError is the validation error
// returned by GetGenerativeNFTMetadataRequest.Validate if the designated
// constraints aren't met.
type GetGenerativeNFTMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGenerativeNFTMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGenerativeNFTMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGenerativeNFTMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGenerativeNFTMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGenerativeNFTMetadataRequestValidationError) ErrorName() string {
	return "GetGenerativeNFTMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGenerativeNFTMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGenerativeNFTMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGenerativeNFTMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGenerativeNFTMetadataRequestValidationError{}
