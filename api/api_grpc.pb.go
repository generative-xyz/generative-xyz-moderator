// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.5
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	Live(ctx context.Context, in *LiveRequest, opts ...grpc.CallOption) (*LiveResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetAuthNonce(ctx context.Context, in *GetNonceMessageReq, opts ...grpc.CallOption) (*GetNonceMessageResp, error)
	VerifyAuthNounce(ctx context.Context, in *VerifyNonceMessageReq, opts ...grpc.CallOption) (*VerifyNonceMessageResp, error)
	GetProfile(ctx context.Context, in *UserProfileReq, opts ...grpc.CallOption) (*UserProfileResp, error)
	UpdateProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UserProfileResp, error)
	GetToken(ctx context.Context, in *GetTokenMessageReq, opts ...grpc.CallOption) (*GetTokenMessageResp, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) Live(ctx context.Context, in *LiveRequest, opts ...grpc.CallOption) (*LiveResponse, error) {
	out := new(LiveResponse)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/Live", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetAuthNonce(ctx context.Context, in *GetNonceMessageReq, opts ...grpc.CallOption) (*GetNonceMessageResp, error) {
	out := new(GetNonceMessageResp)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/GetAuthNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) VerifyAuthNounce(ctx context.Context, in *VerifyNonceMessageReq, opts ...grpc.CallOption) (*VerifyNonceMessageResp, error) {
	out := new(VerifyNonceMessageResp)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/VerifyAuthNounce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetProfile(ctx context.Context, in *UserProfileReq, opts ...grpc.CallOption) (*UserProfileResp, error) {
	out := new(UserProfileResp)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UserProfileResp, error) {
	out := new(UserProfileResp)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetToken(ctx context.Context, in *GetTokenMessageReq, opts ...grpc.CallOption) (*GetTokenMessageResp, error) {
	out := new(GetTokenMessageResp)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	Live(context.Context, *LiveRequest) (*LiveResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GetAuthNonce(context.Context, *GetNonceMessageReq) (*GetNonceMessageResp, error)
	VerifyAuthNounce(context.Context, *VerifyNonceMessageReq) (*VerifyNonceMessageResp, error)
	GetProfile(context.Context, *UserProfileReq) (*UserProfileResp, error)
	UpdateProfile(context.Context, *UpdateUserProfileReq) (*UserProfileResp, error)
	GetToken(context.Context, *GetTokenMessageReq) (*GetTokenMessageResp, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) Live(context.Context, *LiveRequest) (*LiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Live not implemented")
}
func (UnimplementedApiServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedApiServiceServer) GetAuthNonce(context.Context, *GetNonceMessageReq) (*GetNonceMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthNonce not implemented")
}
func (UnimplementedApiServiceServer) VerifyAuthNounce(context.Context, *VerifyNonceMessageReq) (*VerifyNonceMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAuthNounce not implemented")
}
func (UnimplementedApiServiceServer) GetProfile(context.Context, *UserProfileReq) (*UserProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedApiServiceServer) UpdateProfile(context.Context, *UpdateUserProfileReq) (*UserProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedApiServiceServer) GetToken(context.Context, *GetTokenMessageReq) (*GetTokenMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_Live_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Live(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/Live",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Live(ctx, req.(*LiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetAuthNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNonceMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAuthNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/GetAuthNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAuthNonce(ctx, req.(*GetNonceMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_VerifyAuthNounce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyNonceMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).VerifyAuthNounce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/VerifyAuthNounce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).VerifyAuthNounce(ctx, req.(*VerifyNonceMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetProfile(ctx, req.(*UserProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateProfile(ctx, req.(*UpdateUserProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetToken(ctx, req.(*GetTokenMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.renderinghub.io.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Live",
			Handler:    _ApiService_Live_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ApiService_Ping_Handler,
		},
		{
			MethodName: "GetAuthNonce",
			Handler:    _ApiService_GetAuthNonce_Handler,
		},
		{
			MethodName: "VerifyAuthNounce",
			Handler:    _ApiService_VerifyAuthNounce_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _ApiService_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _ApiService_UpdateProfile_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _ApiService_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
