// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	Live(ctx context.Context, in *LiveRequest, opts ...grpc.CallOption) (*LiveResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error)
	GetTemplateDetail(ctx context.Context, in *GetTemplateDetailRequest, opts ...grpc.CallOption) (*GetTemplateDetailResponse, error)
	TemplateRendering(ctx context.Context, in *TemplateRenderingRequest, opts ...grpc.CallOption) (*TemplateRenderingResponse, error)
	GetRenderedNft(ctx context.Context, in *GetRenderedNftRequest, opts ...grpc.CallOption) (*GetRenderedNftResponse, error)
	GetCandyMetadata(ctx context.Context, in *GetCandyMetadataRequest, opts ...grpc.CallOption) (*GetCandyMetadataResponse, error)
	GetCandyMetadatas(ctx context.Context, in *GetCandyMetadatasRequest, opts ...grpc.CallOption) (*GetCandyMetadatasResponse, error)
	GetCandyMetadataPost(ctx context.Context, in *GetCandyMetadataRequest, opts ...grpc.CallOption) (*GetCandyMetadataResponse, error)
	GetRenderedNftPost(ctx context.Context, in *GetRenderedNftRequest, opts ...grpc.CallOption) (*GetRenderedNftResponse, error)
	GetAvatarMetadata(ctx context.Context, in *GetAvatarMetadataRequest, opts ...grpc.CallOption) (*GetAvatarMetadataResponse, error)
	GetAvatarMetadataPost(ctx context.Context, in *GetAvatarMetadataRequest, opts ...grpc.CallOption) (*GetAvatarMetadataResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) Live(ctx context.Context, in *LiveRequest, opts ...grpc.CallOption) (*LiveResponse, error) {
	out := new(LiveResponse)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/Live", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error) {
	out := new(GetTemplateResponse)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTemplateDetail(ctx context.Context, in *GetTemplateDetailRequest, opts ...grpc.CallOption) (*GetTemplateDetailResponse, error) {
	out := new(GetTemplateDetailResponse)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/GetTemplateDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) TemplateRendering(ctx context.Context, in *TemplateRenderingRequest, opts ...grpc.CallOption) (*TemplateRenderingResponse, error) {
	out := new(TemplateRenderingResponse)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/TemplateRendering", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetRenderedNft(ctx context.Context, in *GetRenderedNftRequest, opts ...grpc.CallOption) (*GetRenderedNftResponse, error) {
	out := new(GetRenderedNftResponse)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/GetRenderedNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCandyMetadata(ctx context.Context, in *GetCandyMetadataRequest, opts ...grpc.CallOption) (*GetCandyMetadataResponse, error) {
	out := new(GetCandyMetadataResponse)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/GetCandyMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCandyMetadatas(ctx context.Context, in *GetCandyMetadatasRequest, opts ...grpc.CallOption) (*GetCandyMetadatasResponse, error) {
	out := new(GetCandyMetadatasResponse)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/GetCandyMetadatas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCandyMetadataPost(ctx context.Context, in *GetCandyMetadataRequest, opts ...grpc.CallOption) (*GetCandyMetadataResponse, error) {
	out := new(GetCandyMetadataResponse)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/GetCandyMetadataPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetRenderedNftPost(ctx context.Context, in *GetRenderedNftRequest, opts ...grpc.CallOption) (*GetRenderedNftResponse, error) {
	out := new(GetRenderedNftResponse)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/GetRenderedNftPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetAvatarMetadata(ctx context.Context, in *GetAvatarMetadataRequest, opts ...grpc.CallOption) (*GetAvatarMetadataResponse, error) {
	out := new(GetAvatarMetadataResponse)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/GetAvatarMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetAvatarMetadataPost(ctx context.Context, in *GetAvatarMetadataRequest, opts ...grpc.CallOption) (*GetAvatarMetadataResponse, error) {
	out := new(GetAvatarMetadataResponse)
	err := c.cc.Invoke(ctx, "/api.renderinghub.io.ApiService/GetAvatarMetadataPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	Live(context.Context, *LiveRequest) (*LiveResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error)
	GetTemplateDetail(context.Context, *GetTemplateDetailRequest) (*GetTemplateDetailResponse, error)
	TemplateRendering(context.Context, *TemplateRenderingRequest) (*TemplateRenderingResponse, error)
	GetRenderedNft(context.Context, *GetRenderedNftRequest) (*GetRenderedNftResponse, error)
	GetCandyMetadata(context.Context, *GetCandyMetadataRequest) (*GetCandyMetadataResponse, error)
	GetCandyMetadatas(context.Context, *GetCandyMetadatasRequest) (*GetCandyMetadatasResponse, error)
	GetCandyMetadataPost(context.Context, *GetCandyMetadataRequest) (*GetCandyMetadataResponse, error)
	GetRenderedNftPost(context.Context, *GetRenderedNftRequest) (*GetRenderedNftResponse, error)
	GetAvatarMetadata(context.Context, *GetAvatarMetadataRequest) (*GetAvatarMetadataResponse, error)
	GetAvatarMetadataPost(context.Context, *GetAvatarMetadataRequest) (*GetAvatarMetadataResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) Live(context.Context, *LiveRequest) (*LiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Live not implemented")
}
func (UnimplementedApiServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedApiServiceServer) GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedApiServiceServer) GetTemplateDetail(context.Context, *GetTemplateDetailRequest) (*GetTemplateDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateDetail not implemented")
}
func (UnimplementedApiServiceServer) TemplateRendering(context.Context, *TemplateRenderingRequest) (*TemplateRenderingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateRendering not implemented")
}
func (UnimplementedApiServiceServer) GetRenderedNft(context.Context, *GetRenderedNftRequest) (*GetRenderedNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRenderedNft not implemented")
}
func (UnimplementedApiServiceServer) GetCandyMetadata(context.Context, *GetCandyMetadataRequest) (*GetCandyMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandyMetadata not implemented")
}
func (UnimplementedApiServiceServer) GetCandyMetadatas(context.Context, *GetCandyMetadatasRequest) (*GetCandyMetadatasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandyMetadatas not implemented")
}
func (UnimplementedApiServiceServer) GetCandyMetadataPost(context.Context, *GetCandyMetadataRequest) (*GetCandyMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandyMetadataPost not implemented")
}
func (UnimplementedApiServiceServer) GetRenderedNftPost(context.Context, *GetRenderedNftRequest) (*GetRenderedNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRenderedNftPost not implemented")
}
func (UnimplementedApiServiceServer) GetAvatarMetadata(context.Context, *GetAvatarMetadataRequest) (*GetAvatarMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatarMetadata not implemented")
}
func (UnimplementedApiServiceServer) GetAvatarMetadataPost(context.Context, *GetAvatarMetadataRequest) (*GetAvatarMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatarMetadataPost not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_Live_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Live(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/Live",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Live(ctx, req.(*LiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTemplateDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTemplateDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/GetTemplateDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTemplateDetail(ctx, req.(*GetTemplateDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_TemplateRendering_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateRenderingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).TemplateRendering(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/TemplateRendering",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).TemplateRendering(ctx, req.(*TemplateRenderingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetRenderedNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRenderedNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetRenderedNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/GetRenderedNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetRenderedNft(ctx, req.(*GetRenderedNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCandyMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandyMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCandyMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/GetCandyMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCandyMetadata(ctx, req.(*GetCandyMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCandyMetadatas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandyMetadatasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCandyMetadatas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/GetCandyMetadatas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCandyMetadatas(ctx, req.(*GetCandyMetadatasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCandyMetadataPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandyMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCandyMetadataPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/GetCandyMetadataPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCandyMetadataPost(ctx, req.(*GetCandyMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetRenderedNftPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRenderedNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetRenderedNftPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/GetRenderedNftPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetRenderedNftPost(ctx, req.(*GetRenderedNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetAvatarMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvatarMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAvatarMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/GetAvatarMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAvatarMetadata(ctx, req.(*GetAvatarMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetAvatarMetadataPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvatarMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAvatarMetadataPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.renderinghub.io.ApiService/GetAvatarMetadataPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAvatarMetadataPost(ctx, req.(*GetAvatarMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.renderinghub.io.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Live",
			Handler:    _ApiService_Live_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ApiService_Ping_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _ApiService_GetTemplate_Handler,
		},
		{
			MethodName: "GetTemplateDetail",
			Handler:    _ApiService_GetTemplateDetail_Handler,
		},
		{
			MethodName: "TemplateRendering",
			Handler:    _ApiService_TemplateRendering_Handler,
		},
		{
			MethodName: "GetRenderedNft",
			Handler:    _ApiService_GetRenderedNft_Handler,
		},
		{
			MethodName: "GetCandyMetadata",
			Handler:    _ApiService_GetCandyMetadata_Handler,
		},
		{
			MethodName: "GetCandyMetadatas",
			Handler:    _ApiService_GetCandyMetadatas_Handler,
		},
		{
			MethodName: "GetCandyMetadataPost",
			Handler:    _ApiService_GetCandyMetadataPost_Handler,
		},
		{
			MethodName: "GetRenderedNftPost",
			Handler:    _ApiService_GetRenderedNftPost_Handler,
		},
		{
			MethodName: "GetAvatarMetadata",
			Handler:    _ApiService_GetAvatarMetadata_Handler,
		},
		{
			MethodName: "GetAvatarMetadataPost",
			Handler:    _ApiService_GetAvatarMetadataPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
